/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.reportland.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import org.opencps.reportland.model.ReportLandTax;
import org.opencps.reportland.service.ReportLandTaxLocalService;
import org.opencps.reportland.service.persistence.ReportLandTaxPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the report land tax local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.opencps.reportland.service.impl.ReportLandTaxLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see org.opencps.reportland.service.impl.ReportLandTaxLocalServiceImpl
 * @see org.opencps.reportland.service.ReportLandTaxLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ReportLandTaxLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ReportLandTaxLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.opencps.reportland.service.ReportLandTaxLocalServiceUtil} to access the report land tax local service.
	 */

	/**
	 * Adds the report land tax to the database. Also notifies the appropriate model listeners.
	 *
	 * @param reportLandTax the report land tax
	 * @return the report land tax that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ReportLandTax addReportLandTax(ReportLandTax reportLandTax) {
		reportLandTax.setNew(true);

		return reportLandTaxPersistence.update(reportLandTax);
	}

	/**
	 * Creates a new report land tax with the primary key. Does not add the report land tax to the database.
	 *
	 * @param reportId the primary key for the new report land tax
	 * @return the new report land tax
	 */
	@Override
	@Transactional(enabled = false)
	public ReportLandTax createReportLandTax(long reportId) {
		return reportLandTaxPersistence.create(reportId);
	}

	/**
	 * Deletes the report land tax with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param reportId the primary key of the report land tax
	 * @return the report land tax that was removed
	 * @throws PortalException if a report land tax with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ReportLandTax deleteReportLandTax(long reportId)
		throws PortalException {
		return reportLandTaxPersistence.remove(reportId);
	}

	/**
	 * Deletes the report land tax from the database. Also notifies the appropriate model listeners.
	 *
	 * @param reportLandTax the report land tax
	 * @return the report land tax that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ReportLandTax deleteReportLandTax(ReportLandTax reportLandTax) {
		return reportLandTaxPersistence.remove(reportLandTax);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ReportLandTax.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return reportLandTaxPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.reportland.model.impl.ReportLandTaxModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return reportLandTaxPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.reportland.model.impl.ReportLandTaxModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return reportLandTaxPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return reportLandTaxPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return reportLandTaxPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ReportLandTax fetchReportLandTax(long reportId) {
		return reportLandTaxPersistence.fetchByPrimaryKey(reportId);
	}

	/**
	 * Returns the report land tax matching the UUID and group.
	 *
	 * @param uuid the report land tax's UUID
	 * @param groupId the primary key of the group
	 * @return the matching report land tax, or <code>null</code> if a matching report land tax could not be found
	 */
	@Override
	public ReportLandTax fetchReportLandTaxByUuidAndGroupId(String uuid,
		long groupId) {
		return reportLandTaxPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the report land tax with the primary key.
	 *
	 * @param reportId the primary key of the report land tax
	 * @return the report land tax
	 * @throws PortalException if a report land tax with the primary key could not be found
	 */
	@Override
	public ReportLandTax getReportLandTax(long reportId)
		throws PortalException {
		return reportLandTaxPersistence.findByPrimaryKey(reportId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(reportLandTaxLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ReportLandTax.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("reportId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(reportLandTaxLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ReportLandTax.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("reportId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(reportLandTaxLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ReportLandTax.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("reportId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<ReportLandTax>() {
				@Override
				public void performAction(ReportLandTax reportLandTax)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						reportLandTax);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(ReportLandTax.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return reportLandTaxLocalService.deleteReportLandTax((ReportLandTax)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return reportLandTaxPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the report land taxs matching the UUID and company.
	 *
	 * @param uuid the UUID of the report land taxs
	 * @param companyId the primary key of the company
	 * @return the matching report land taxs, or an empty list if no matches were found
	 */
	@Override
	public List<ReportLandTax> getReportLandTaxsByUuidAndCompanyId(
		String uuid, long companyId) {
		return reportLandTaxPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of report land taxs matching the UUID and company.
	 *
	 * @param uuid the UUID of the report land taxs
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of report land taxs
	 * @param end the upper bound of the range of report land taxs (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching report land taxs, or an empty list if no matches were found
	 */
	@Override
	public List<ReportLandTax> getReportLandTaxsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<ReportLandTax> orderByComparator) {
		return reportLandTaxPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the report land tax matching the UUID and group.
	 *
	 * @param uuid the report land tax's UUID
	 * @param groupId the primary key of the group
	 * @return the matching report land tax
	 * @throws PortalException if a matching report land tax could not be found
	 */
	@Override
	public ReportLandTax getReportLandTaxByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return reportLandTaxPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the report land taxs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.reportland.model.impl.ReportLandTaxModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of report land taxs
	 * @param end the upper bound of the range of report land taxs (not inclusive)
	 * @return the range of report land taxs
	 */
	@Override
	public List<ReportLandTax> getReportLandTaxs(int start, int end) {
		return reportLandTaxPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of report land taxs.
	 *
	 * @return the number of report land taxs
	 */
	@Override
	public int getReportLandTaxsCount() {
		return reportLandTaxPersistence.countAll();
	}

	/**
	 * Updates the report land tax in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param reportLandTax the report land tax
	 * @return the report land tax that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ReportLandTax updateReportLandTax(ReportLandTax reportLandTax) {
		return reportLandTaxPersistence.update(reportLandTax);
	}

	/**
	 * Returns the report land tax local service.
	 *
	 * @return the report land tax local service
	 */
	public ReportLandTaxLocalService getReportLandTaxLocalService() {
		return reportLandTaxLocalService;
	}

	/**
	 * Sets the report land tax local service.
	 *
	 * @param reportLandTaxLocalService the report land tax local service
	 */
	public void setReportLandTaxLocalService(
		ReportLandTaxLocalService reportLandTaxLocalService) {
		this.reportLandTaxLocalService = reportLandTaxLocalService;
	}

	/**
	 * Returns the report land tax persistence.
	 *
	 * @return the report land tax persistence
	 */
	public ReportLandTaxPersistence getReportLandTaxPersistence() {
		return reportLandTaxPersistence;
	}

	/**
	 * Sets the report land tax persistence.
	 *
	 * @param reportLandTaxPersistence the report land tax persistence
	 */
	public void setReportLandTaxPersistence(
		ReportLandTaxPersistence reportLandTaxPersistence) {
		this.reportLandTaxPersistence = reportLandTaxPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("org.opencps.reportland.model.ReportLandTax",
			reportLandTaxLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"org.opencps.reportland.model.ReportLandTax");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ReportLandTaxLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ReportLandTax.class;
	}

	protected String getModelClassName() {
		return ReportLandTax.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = reportLandTaxPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ReportLandTaxLocalService.class)
	protected ReportLandTaxLocalService reportLandTaxLocalService;
	@BeanReference(type = ReportLandTaxPersistence.class)
	protected ReportLandTaxPersistence reportLandTaxPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}