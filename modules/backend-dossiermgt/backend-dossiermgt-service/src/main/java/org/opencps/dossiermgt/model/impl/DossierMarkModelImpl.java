/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.dossiermgt.model.DossierMark;
import org.opencps.dossiermgt.model.DossierMarkModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DossierMark service. Represents a row in the &quot;opencps_dossiermark&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DossierMarkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierMarkImpl}.
 * </p>
 *
 * @author huymq
 * @see DossierMarkImpl
 * @see DossierMark
 * @see DossierMarkModel
 * @generated
 */
@ProviderType
public class DossierMarkModelImpl extends BaseModelImpl<DossierMark>
	implements DossierMarkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier mark model instance should use the {@link DossierMark} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dossiermark";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dossierMarkId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dossierId", Types.BIGINT },
			{ "dossierPartNo", Types.VARCHAR },
			{ "fileCheck", Types.INTEGER },
			{ "fileMark", Types.INTEGER },
			{ "fileComment", Types.VARCHAR },
			{ "recordCount", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierMarkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierPartNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileCheck", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("fileMark", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("fileComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordCount", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_dossiermark (uuid_ VARCHAR(75) null,dossierMarkId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,dossierId LONG,dossierPartNo VARCHAR(255) null,fileCheck INTEGER,fileMark INTEGER,fileComment VARCHAR(512) null,recordCount VARCHAR(512) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dossiermark";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierMark.dossierMarkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dossiermark.dossierMarkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.DossierMark"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.DossierMark"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.DossierMark"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long DOSSIERID_COLUMN_BITMASK = 2L;
	public static final long DOSSIERPARTNO_COLUMN_BITMASK = 4L;
	public static final long FILEMARK_COLUMN_BITMASK = 8L;
	public static final long GROUPID_COLUMN_BITMASK = 16L;
	public static final long RECORDCOUNT_COLUMN_BITMASK = 32L;
	public static final long UUID_COLUMN_BITMASK = 64L;
	public static final long DOSSIERMARKID_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.DossierMark"));

	public DossierMarkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierMarkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierMarkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierMarkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierMark.class;
	}

	@Override
	public String getModelClassName() {
		return DossierMark.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dossierMarkId", getDossierMarkId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierPartNo", getDossierPartNo());
		attributes.put("fileCheck", getFileCheck());
		attributes.put("fileMark", getFileMark());
		attributes.put("fileComment", getFileComment());
		attributes.put("recordCount", getRecordCount());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dossierMarkId = (Long)attributes.get("dossierMarkId");

		if (dossierMarkId != null) {
			setDossierMarkId(dossierMarkId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String dossierPartNo = (String)attributes.get("dossierPartNo");

		if (dossierPartNo != null) {
			setDossierPartNo(dossierPartNo);
		}

		Integer fileCheck = (Integer)attributes.get("fileCheck");

		if (fileCheck != null) {
			setFileCheck(fileCheck);
		}

		Integer fileMark = (Integer)attributes.get("fileMark");

		if (fileMark != null) {
			setFileMark(fileMark);
		}

		String fileComment = (String)attributes.get("fileComment");

		if (fileComment != null) {
			setFileComment(fileComment);
		}

		String recordCount = (String)attributes.get("recordCount");

		if (recordCount != null) {
			setRecordCount(recordCount);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDossierMarkId() {
		return _dossierMarkId;
	}

	@Override
	public void setDossierMarkId(long dossierMarkId) {
		_dossierMarkId = dossierMarkId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getDossierPartNo() {
		if (_dossierPartNo == null) {
			return "";
		}
		else {
			return _dossierPartNo;
		}
	}

	@Override
	public void setDossierPartNo(String dossierPartNo) {
		_columnBitmask |= DOSSIERPARTNO_COLUMN_BITMASK;

		if (_originalDossierPartNo == null) {
			_originalDossierPartNo = _dossierPartNo;
		}

		_dossierPartNo = dossierPartNo;
	}

	public String getOriginalDossierPartNo() {
		return GetterUtil.getString(_originalDossierPartNo);
	}

	@Override
	public int getFileCheck() {
		return _fileCheck;
	}

	@Override
	public void setFileCheck(int fileCheck) {
		_fileCheck = fileCheck;
	}

	@Override
	public int getFileMark() {
		return _fileMark;
	}

	@Override
	public void setFileMark(int fileMark) {
		_columnBitmask |= FILEMARK_COLUMN_BITMASK;

		if (!_setOriginalFileMark) {
			_setOriginalFileMark = true;

			_originalFileMark = _fileMark;
		}

		_fileMark = fileMark;
	}

	public int getOriginalFileMark() {
		return _originalFileMark;
	}

	@Override
	public String getFileComment() {
		if (_fileComment == null) {
			return "";
		}
		else {
			return _fileComment;
		}
	}

	@Override
	public void setFileComment(String fileComment) {
		_fileComment = fileComment;
	}

	@Override
	public String getRecordCount() {
		if (_recordCount == null) {
			return "";
		}
		else {
			return _recordCount;
		}
	}

	@Override
	public void setRecordCount(String recordCount) {
		_columnBitmask |= RECORDCOUNT_COLUMN_BITMASK;

		if (_originalRecordCount == null) {
			_originalRecordCount = _recordCount;
		}

		_recordCount = recordCount;
	}

	public String getOriginalRecordCount() {
		return GetterUtil.getString(_originalRecordCount);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				DossierMark.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DossierMark.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierMark toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierMark)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierMarkImpl dossierMarkImpl = new DossierMarkImpl();

		dossierMarkImpl.setUuid(getUuid());
		dossierMarkImpl.setDossierMarkId(getDossierMarkId());
		dossierMarkImpl.setCompanyId(getCompanyId());
		dossierMarkImpl.setGroupId(getGroupId());
		dossierMarkImpl.setUserId(getUserId());
		dossierMarkImpl.setCreateDate(getCreateDate());
		dossierMarkImpl.setModifiedDate(getModifiedDate());
		dossierMarkImpl.setDossierId(getDossierId());
		dossierMarkImpl.setDossierPartNo(getDossierPartNo());
		dossierMarkImpl.setFileCheck(getFileCheck());
		dossierMarkImpl.setFileMark(getFileMark());
		dossierMarkImpl.setFileComment(getFileComment());
		dossierMarkImpl.setRecordCount(getRecordCount());

		dossierMarkImpl.resetOriginalValues();

		return dossierMarkImpl;
	}

	@Override
	public int compareTo(DossierMark dossierMark) {
		long primaryKey = dossierMark.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierMark)) {
			return false;
		}

		DossierMark dossierMark = (DossierMark)obj;

		long primaryKey = dossierMark.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DossierMarkModelImpl dossierMarkModelImpl = this;

		dossierMarkModelImpl._originalUuid = dossierMarkModelImpl._uuid;

		dossierMarkModelImpl._originalCompanyId = dossierMarkModelImpl._companyId;

		dossierMarkModelImpl._setOriginalCompanyId = false;

		dossierMarkModelImpl._originalGroupId = dossierMarkModelImpl._groupId;

		dossierMarkModelImpl._setOriginalGroupId = false;

		dossierMarkModelImpl._setModifiedDate = false;

		dossierMarkModelImpl._originalDossierId = dossierMarkModelImpl._dossierId;

		dossierMarkModelImpl._setOriginalDossierId = false;

		dossierMarkModelImpl._originalDossierPartNo = dossierMarkModelImpl._dossierPartNo;

		dossierMarkModelImpl._originalFileMark = dossierMarkModelImpl._fileMark;

		dossierMarkModelImpl._setOriginalFileMark = false;

		dossierMarkModelImpl._originalRecordCount = dossierMarkModelImpl._recordCount;

		dossierMarkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DossierMark> toCacheModel() {
		DossierMarkCacheModel dossierMarkCacheModel = new DossierMarkCacheModel();

		dossierMarkCacheModel.uuid = getUuid();

		String uuid = dossierMarkCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dossierMarkCacheModel.uuid = null;
		}

		dossierMarkCacheModel.dossierMarkId = getDossierMarkId();

		dossierMarkCacheModel.companyId = getCompanyId();

		dossierMarkCacheModel.groupId = getGroupId();

		dossierMarkCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dossierMarkCacheModel.createDate = createDate.getTime();
		}
		else {
			dossierMarkCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dossierMarkCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dossierMarkCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dossierMarkCacheModel.dossierId = getDossierId();

		dossierMarkCacheModel.dossierPartNo = getDossierPartNo();

		String dossierPartNo = dossierMarkCacheModel.dossierPartNo;

		if ((dossierPartNo != null) && (dossierPartNo.length() == 0)) {
			dossierMarkCacheModel.dossierPartNo = null;
		}

		dossierMarkCacheModel.fileCheck = getFileCheck();

		dossierMarkCacheModel.fileMark = getFileMark();

		dossierMarkCacheModel.fileComment = getFileComment();

		String fileComment = dossierMarkCacheModel.fileComment;

		if ((fileComment != null) && (fileComment.length() == 0)) {
			dossierMarkCacheModel.fileComment = null;
		}

		dossierMarkCacheModel.recordCount = getRecordCount();

		String recordCount = dossierMarkCacheModel.recordCount;

		if ((recordCount != null) && (recordCount.length() == 0)) {
			dossierMarkCacheModel.recordCount = null;
		}

		return dossierMarkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dossierMarkId=");
		sb.append(getDossierMarkId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierPartNo=");
		sb.append(getDossierPartNo());
		sb.append(", fileCheck=");
		sb.append(getFileCheck());
		sb.append(", fileMark=");
		sb.append(getFileMark());
		sb.append(", fileComment=");
		sb.append(getFileComment());
		sb.append(", recordCount=");
		sb.append(getRecordCount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.DossierMark");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierMarkId</column-name><column-value><![CDATA[");
		sb.append(getDossierMarkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierPartNo</column-name><column-value><![CDATA[");
		sb.append(getDossierPartNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileCheck</column-name><column-value><![CDATA[");
		sb.append(getFileCheck());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileMark</column-name><column-value><![CDATA[");
		sb.append(getFileMark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileComment</column-name><column-value><![CDATA[");
		sb.append(getFileComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordCount</column-name><column-value><![CDATA[");
		sb.append(getRecordCount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DossierMark.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierMark.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dossierMarkId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _dossierPartNo;
	private String _originalDossierPartNo;
	private int _fileCheck;
	private int _fileMark;
	private int _originalFileMark;
	private boolean _setOriginalFileMark;
	private String _fileComment;
	private String _recordCount;
	private String _originalRecordCount;
	private long _columnBitmask;
	private DossierMark _escapedModel;
}