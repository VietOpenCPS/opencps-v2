/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.dossiermgt.model.PostConnect;
import org.opencps.dossiermgt.model.PostConnectModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PostConnect service. Represents a row in the &quot;opencps_postconnect&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PostConnectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PostConnectImpl}.
 * </p>
 *
 * @author huymq
 * @see PostConnectImpl
 * @see PostConnect
 * @see PostConnectModel
 * @generated
 */
@ProviderType
public class PostConnectModelImpl extends BaseModelImpl<PostConnect>
	implements PostConnectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a post connect model instance should use the {@link PostConnect} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_postconnect";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "postConnectId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dossierId", Types.BIGINT },
			{ "postService", Types.INTEGER },
			{ "postType", Types.INTEGER },
			{ "orderNumber", Types.VARCHAR },
			{ "postStatus", Types.INTEGER },
			{ "metadata", Types.VARCHAR },
			{ "syncState", Types.INTEGER },
			{ "retry", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postConnectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postService", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("postType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("orderNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("metadata", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("syncState", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("retry", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_postconnect (uuid_ VARCHAR(75) null,postConnectId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dossierId LONG,postService INTEGER,postType INTEGER,orderNumber VARCHAR(75) null,postStatus INTEGER,metadata VARCHAR(75) null,syncState INTEGER,retry INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_postconnect";
	public static final String ORDER_BY_JPQL = " ORDER BY postConnect.postConnectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_postconnect.postConnectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.PostConnect"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.PostConnect"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.PostConnect"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long ORDERNUMBER_COLUMN_BITMASK = 4L;
	public static final long POSTSTATUS_COLUMN_BITMASK = 8L;
	public static final long SYNCSTATE_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long POSTCONNECTID_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.PostConnect"));

	public PostConnectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _postConnectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPostConnectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _postConnectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PostConnect.class;
	}

	@Override
	public String getModelClassName() {
		return PostConnect.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("postConnectId", getPostConnectId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dossierId", getDossierId());
		attributes.put("postService", getPostService());
		attributes.put("postType", getPostType());
		attributes.put("orderNumber", getOrderNumber());
		attributes.put("postStatus", getPostStatus());
		attributes.put("metadata", getMetadata());
		attributes.put("syncState", getSyncState());
		attributes.put("retry", getRetry());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long postConnectId = (Long)attributes.get("postConnectId");

		if (postConnectId != null) {
			setPostConnectId(postConnectId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Integer postService = (Integer)attributes.get("postService");

		if (postService != null) {
			setPostService(postService);
		}

		Integer postType = (Integer)attributes.get("postType");

		if (postType != null) {
			setPostType(postType);
		}

		String orderNumber = (String)attributes.get("orderNumber");

		if (orderNumber != null) {
			setOrderNumber(orderNumber);
		}

		Integer postStatus = (Integer)attributes.get("postStatus");

		if (postStatus != null) {
			setPostStatus(postStatus);
		}

		String metadata = (String)attributes.get("metadata");

		if (metadata != null) {
			setMetadata(metadata);
		}

		Integer syncState = (Integer)attributes.get("syncState");

		if (syncState != null) {
			setSyncState(syncState);
		}

		Integer retry = (Integer)attributes.get("retry");

		if (retry != null) {
			setRetry(retry);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getPostConnectId() {
		return _postConnectId;
	}

	@Override
	public void setPostConnectId(long postConnectId) {
		_postConnectId = postConnectId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_dossierId = dossierId;
	}

	@Override
	public int getPostService() {
		return _postService;
	}

	@Override
	public void setPostService(int postService) {
		_postService = postService;
	}

	@Override
	public int getPostType() {
		return _postType;
	}

	@Override
	public void setPostType(int postType) {
		_postType = postType;
	}

	@Override
	public String getOrderNumber() {
		if (_orderNumber == null) {
			return "";
		}
		else {
			return _orderNumber;
		}
	}

	@Override
	public void setOrderNumber(String orderNumber) {
		_columnBitmask |= ORDERNUMBER_COLUMN_BITMASK;

		if (_originalOrderNumber == null) {
			_originalOrderNumber = _orderNumber;
		}

		_orderNumber = orderNumber;
	}

	public String getOriginalOrderNumber() {
		return GetterUtil.getString(_originalOrderNumber);
	}

	@Override
	public int getPostStatus() {
		return _postStatus;
	}

	@Override
	public void setPostStatus(int postStatus) {
		_columnBitmask |= POSTSTATUS_COLUMN_BITMASK;

		if (!_setOriginalPostStatus) {
			_setOriginalPostStatus = true;

			_originalPostStatus = _postStatus;
		}

		_postStatus = postStatus;
	}

	public int getOriginalPostStatus() {
		return _originalPostStatus;
	}

	@Override
	public String getMetadata() {
		if (_metadata == null) {
			return "";
		}
		else {
			return _metadata;
		}
	}

	@Override
	public void setMetadata(String metadata) {
		_metadata = metadata;
	}

	@Override
	public int getSyncState() {
		return _syncState;
	}

	@Override
	public void setSyncState(int syncState) {
		_columnBitmask |= SYNCSTATE_COLUMN_BITMASK;

		if (!_setOriginalSyncState) {
			_setOriginalSyncState = true;

			_originalSyncState = _syncState;
		}

		_syncState = syncState;
	}

	public int getOriginalSyncState() {
		return _originalSyncState;
	}

	@Override
	public int getRetry() {
		return _retry;
	}

	@Override
	public void setRetry(int retry) {
		_retry = retry;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				PostConnect.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PostConnect.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PostConnect toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PostConnect)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PostConnectImpl postConnectImpl = new PostConnectImpl();

		postConnectImpl.setUuid(getUuid());
		postConnectImpl.setPostConnectId(getPostConnectId());
		postConnectImpl.setGroupId(getGroupId());
		postConnectImpl.setCompanyId(getCompanyId());
		postConnectImpl.setUserId(getUserId());
		postConnectImpl.setUserName(getUserName());
		postConnectImpl.setCreateDate(getCreateDate());
		postConnectImpl.setModifiedDate(getModifiedDate());
		postConnectImpl.setDossierId(getDossierId());
		postConnectImpl.setPostService(getPostService());
		postConnectImpl.setPostType(getPostType());
		postConnectImpl.setOrderNumber(getOrderNumber());
		postConnectImpl.setPostStatus(getPostStatus());
		postConnectImpl.setMetadata(getMetadata());
		postConnectImpl.setSyncState(getSyncState());
		postConnectImpl.setRetry(getRetry());

		postConnectImpl.resetOriginalValues();

		return postConnectImpl;
	}

	@Override
	public int compareTo(PostConnect postConnect) {
		long primaryKey = postConnect.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PostConnect)) {
			return false;
		}

		PostConnect postConnect = (PostConnect)obj;

		long primaryKey = postConnect.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PostConnectModelImpl postConnectModelImpl = this;

		postConnectModelImpl._originalUuid = postConnectModelImpl._uuid;

		postConnectModelImpl._originalGroupId = postConnectModelImpl._groupId;

		postConnectModelImpl._setOriginalGroupId = false;

		postConnectModelImpl._originalCompanyId = postConnectModelImpl._companyId;

		postConnectModelImpl._setOriginalCompanyId = false;

		postConnectModelImpl._setModifiedDate = false;

		postConnectModelImpl._originalOrderNumber = postConnectModelImpl._orderNumber;

		postConnectModelImpl._originalPostStatus = postConnectModelImpl._postStatus;

		postConnectModelImpl._setOriginalPostStatus = false;

		postConnectModelImpl._originalSyncState = postConnectModelImpl._syncState;

		postConnectModelImpl._setOriginalSyncState = false;

		postConnectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PostConnect> toCacheModel() {
		PostConnectCacheModel postConnectCacheModel = new PostConnectCacheModel();

		postConnectCacheModel.uuid = getUuid();

		String uuid = postConnectCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			postConnectCacheModel.uuid = null;
		}

		postConnectCacheModel.postConnectId = getPostConnectId();

		postConnectCacheModel.groupId = getGroupId();

		postConnectCacheModel.companyId = getCompanyId();

		postConnectCacheModel.userId = getUserId();

		postConnectCacheModel.userName = getUserName();

		String userName = postConnectCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			postConnectCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			postConnectCacheModel.createDate = createDate.getTime();
		}
		else {
			postConnectCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			postConnectCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			postConnectCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		postConnectCacheModel.dossierId = getDossierId();

		postConnectCacheModel.postService = getPostService();

		postConnectCacheModel.postType = getPostType();

		postConnectCacheModel.orderNumber = getOrderNumber();

		String orderNumber = postConnectCacheModel.orderNumber;

		if ((orderNumber != null) && (orderNumber.length() == 0)) {
			postConnectCacheModel.orderNumber = null;
		}

		postConnectCacheModel.postStatus = getPostStatus();

		postConnectCacheModel.metadata = getMetadata();

		String metadata = postConnectCacheModel.metadata;

		if ((metadata != null) && (metadata.length() == 0)) {
			postConnectCacheModel.metadata = null;
		}

		postConnectCacheModel.syncState = getSyncState();

		postConnectCacheModel.retry = getRetry();

		return postConnectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", postConnectId=");
		sb.append(getPostConnectId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", postService=");
		sb.append(getPostService());
		sb.append(", postType=");
		sb.append(getPostType());
		sb.append(", orderNumber=");
		sb.append(getOrderNumber());
		sb.append(", postStatus=");
		sb.append(getPostStatus());
		sb.append(", metadata=");
		sb.append(getMetadata());
		sb.append(", syncState=");
		sb.append(getSyncState());
		sb.append(", retry=");
		sb.append(getRetry());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.PostConnect");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postConnectId</column-name><column-value><![CDATA[");
		sb.append(getPostConnectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postService</column-name><column-value><![CDATA[");
		sb.append(getPostService());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postType</column-name><column-value><![CDATA[");
		sb.append(getPostType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderNumber</column-name><column-value><![CDATA[");
		sb.append(getOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postStatus</column-name><column-value><![CDATA[");
		sb.append(getPostStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metadata</column-name><column-value><![CDATA[");
		sb.append(getMetadata());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncState</column-name><column-value><![CDATA[");
		sb.append(getSyncState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>retry</column-name><column-value><![CDATA[");
		sb.append(getRetry());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PostConnect.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PostConnect.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _postConnectId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _dossierId;
	private int _postService;
	private int _postType;
	private String _orderNumber;
	private String _originalOrderNumber;
	private int _postStatus;
	private int _originalPostStatus;
	private boolean _setOriginalPostStatus;
	private String _metadata;
	private int _syncState;
	private int _originalSyncState;
	private boolean _setOriginalSyncState;
	private int _retry;
	private long _columnBitmask;
	private PostConnect _escapedModel;
}