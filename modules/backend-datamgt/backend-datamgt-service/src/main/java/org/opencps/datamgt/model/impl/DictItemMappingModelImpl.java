/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.datamgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.datamgt.model.DictItemMapping;
import org.opencps.datamgt.model.DictItemMappingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DictItemMapping service. Represents a row in the &quot;opencps_dictItemmapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DictItemMappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictItemMappingImpl}.
 * </p>
 *
 * @author khoavu
 * @see DictItemMappingImpl
 * @see DictItemMapping
 * @see DictItemMappingModel
 * @generated
 */
@ProviderType
public class DictItemMappingModelImpl extends BaseModelImpl<DictItemMapping>
	implements DictItemMappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dict item mapping model instance should use the {@link DictItemMapping} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dictItemmapping";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mappingId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "itemCode", Types.VARCHAR },
			{ "itemCodeDVCQG", Types.VARCHAR },
			{ "collectionId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mappingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("itemCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemCodeDVCQG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("collectionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_dictItemmapping (mappingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,itemCode VARCHAR(75) null,itemCodeDVCQG VARCHAR(75) null,collectionId LONG)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dictItemmapping";
	public static final String ORDER_BY_JPQL = " ORDER BY dictItemMapping.mappingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dictItemmapping.mappingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.datamgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.datamgt.model.DictItemMapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.datamgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.datamgt.model.DictItemMapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.datamgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.datamgt.model.DictItemMapping"),
			true);
	public static final long COLLECTIONID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long ITEMCODE_COLUMN_BITMASK = 4L;
	public static final long ITEMCODEDVCQG_COLUMN_BITMASK = 8L;
	public static final long MAPPINGID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.datamgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.datamgt.model.DictItemMapping"));

	public DictItemMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mappingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMappingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mappingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DictItemMapping.class;
	}

	@Override
	public String getModelClassName() {
		return DictItemMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mappingId", getMappingId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("itemCode", getItemCode());
		attributes.put("itemCodeDVCQG", getItemCodeDVCQG());
		attributes.put("collectionId", getCollectionId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mappingId = (Long)attributes.get("mappingId");

		if (mappingId != null) {
			setMappingId(mappingId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String itemCode = (String)attributes.get("itemCode");

		if (itemCode != null) {
			setItemCode(itemCode);
		}

		String itemCodeDVCQG = (String)attributes.get("itemCodeDVCQG");

		if (itemCodeDVCQG != null) {
			setItemCodeDVCQG(itemCodeDVCQG);
		}

		Long collectionId = (Long)attributes.get("collectionId");

		if (collectionId != null) {
			setCollectionId(collectionId);
		}
	}

	@Override
	public long getMappingId() {
		return _mappingId;
	}

	@Override
	public void setMappingId(long mappingId) {
		_mappingId = mappingId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getItemCode() {
		if (_itemCode == null) {
			return "";
		}
		else {
			return _itemCode;
		}
	}

	@Override
	public void setItemCode(String itemCode) {
		_columnBitmask |= ITEMCODE_COLUMN_BITMASK;

		if (_originalItemCode == null) {
			_originalItemCode = _itemCode;
		}

		_itemCode = itemCode;
	}

	public String getOriginalItemCode() {
		return GetterUtil.getString(_originalItemCode);
	}

	@Override
	public String getItemCodeDVCQG() {
		if (_itemCodeDVCQG == null) {
			return "";
		}
		else {
			return _itemCodeDVCQG;
		}
	}

	@Override
	public void setItemCodeDVCQG(String itemCodeDVCQG) {
		_columnBitmask |= ITEMCODEDVCQG_COLUMN_BITMASK;

		if (_originalItemCodeDVCQG == null) {
			_originalItemCodeDVCQG = _itemCodeDVCQG;
		}

		_itemCodeDVCQG = itemCodeDVCQG;
	}

	public String getOriginalItemCodeDVCQG() {
		return GetterUtil.getString(_originalItemCodeDVCQG);
	}

	@Override
	public long getCollectionId() {
		return _collectionId;
	}

	@Override
	public void setCollectionId(long collectionId) {
		_columnBitmask |= COLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalCollectionId) {
			_setOriginalCollectionId = true;

			_originalCollectionId = _collectionId;
		}

		_collectionId = collectionId;
	}

	public long getOriginalCollectionId() {
		return _originalCollectionId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DictItemMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DictItemMapping toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DictItemMapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictItemMappingImpl dictItemMappingImpl = new DictItemMappingImpl();

		dictItemMappingImpl.setMappingId(getMappingId());
		dictItemMappingImpl.setGroupId(getGroupId());
		dictItemMappingImpl.setCompanyId(getCompanyId());
		dictItemMappingImpl.setUserId(getUserId());
		dictItemMappingImpl.setUserName(getUserName());
		dictItemMappingImpl.setCreateDate(getCreateDate());
		dictItemMappingImpl.setModifiedDate(getModifiedDate());
		dictItemMappingImpl.setItemCode(getItemCode());
		dictItemMappingImpl.setItemCodeDVCQG(getItemCodeDVCQG());
		dictItemMappingImpl.setCollectionId(getCollectionId());

		dictItemMappingImpl.resetOriginalValues();

		return dictItemMappingImpl;
	}

	@Override
	public int compareTo(DictItemMapping dictItemMapping) {
		long primaryKey = dictItemMapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DictItemMapping)) {
			return false;
		}

		DictItemMapping dictItemMapping = (DictItemMapping)obj;

		long primaryKey = dictItemMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DictItemMappingModelImpl dictItemMappingModelImpl = this;

		dictItemMappingModelImpl._originalGroupId = dictItemMappingModelImpl._groupId;

		dictItemMappingModelImpl._setOriginalGroupId = false;

		dictItemMappingModelImpl._setModifiedDate = false;

		dictItemMappingModelImpl._originalItemCode = dictItemMappingModelImpl._itemCode;

		dictItemMappingModelImpl._originalItemCodeDVCQG = dictItemMappingModelImpl._itemCodeDVCQG;

		dictItemMappingModelImpl._originalCollectionId = dictItemMappingModelImpl._collectionId;

		dictItemMappingModelImpl._setOriginalCollectionId = false;

		dictItemMappingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DictItemMapping> toCacheModel() {
		DictItemMappingCacheModel dictItemMappingCacheModel = new DictItemMappingCacheModel();

		dictItemMappingCacheModel.mappingId = getMappingId();

		dictItemMappingCacheModel.groupId = getGroupId();

		dictItemMappingCacheModel.companyId = getCompanyId();

		dictItemMappingCacheModel.userId = getUserId();

		dictItemMappingCacheModel.userName = getUserName();

		String userName = dictItemMappingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dictItemMappingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictItemMappingCacheModel.createDate = createDate.getTime();
		}
		else {
			dictItemMappingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictItemMappingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictItemMappingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictItemMappingCacheModel.itemCode = getItemCode();

		String itemCode = dictItemMappingCacheModel.itemCode;

		if ((itemCode != null) && (itemCode.length() == 0)) {
			dictItemMappingCacheModel.itemCode = null;
		}

		dictItemMappingCacheModel.itemCodeDVCQG = getItemCodeDVCQG();

		String itemCodeDVCQG = dictItemMappingCacheModel.itemCodeDVCQG;

		if ((itemCodeDVCQG != null) && (itemCodeDVCQG.length() == 0)) {
			dictItemMappingCacheModel.itemCodeDVCQG = null;
		}

		dictItemMappingCacheModel.collectionId = getCollectionId();

		return dictItemMappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{mappingId=");
		sb.append(getMappingId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", itemCode=");
		sb.append(getItemCode());
		sb.append(", itemCodeDVCQG=");
		sb.append(getItemCodeDVCQG());
		sb.append(", collectionId=");
		sb.append(getCollectionId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.opencps.datamgt.model.DictItemMapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mappingId</column-name><column-value><![CDATA[");
		sb.append(getMappingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCode</column-name><column-value><![CDATA[");
		sb.append(getItemCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCodeDVCQG</column-name><column-value><![CDATA[");
		sb.append(getItemCodeDVCQG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionId</column-name><column-value><![CDATA[");
		sb.append(getCollectionId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DictItemMapping.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DictItemMapping.class, ModelWrapper.class
		};
	private long _mappingId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _itemCode;
	private String _originalItemCode;
	private String _itemCodeDVCQG;
	private String _originalItemCodeDVCQG;
	private long _collectionId;
	private long _originalCollectionId;
	private boolean _setOriginalCollectionId;
	private long _columnBitmask;
	private DictItemMapping _escapedModel;
}