/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.usermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.usermgt.model.Employee;
import org.opencps.usermgt.model.EmployeeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;opencps_employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author khoavu
 * @see EmployeeImpl
 * @see Employee
 * @see EmployeeModel
 * @generated
 */
@ProviderType
public class EmployeeModelImpl extends BaseModelImpl<Employee>
	implements EmployeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link Employee} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_employee";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "employeeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "employeeNo", Types.VARCHAR },
			{ "fullName", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "gender", Types.INTEGER },
			{ "birthdate", Types.TIMESTAMP },
			{ "telNo", Types.VARCHAR },
			{ "mobile", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "workingStatus", Types.INTEGER },
			{ "mappingUserId", Types.BIGINT },
			{ "mainJobPostId", Types.BIGINT },
			{ "photoFileEntryId", Types.BIGINT },
			{ "recruitDate", Types.TIMESTAMP },
			{ "leaveDate", Types.TIMESTAMP },
			{ "fileCertId", Types.BIGINT },
			{ "fileSignId", Types.BIGINT },
			{ "fileCertPath", Types.VARCHAR },
			{ "fileSignPath", Types.VARCHAR },
			{ "scope", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("birthdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("telNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workingStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("mappingUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mainJobPostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("photoFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("recruitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("leaveDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fileCertId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileSignId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileCertPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileSignPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scope", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_employee (uuid_ VARCHAR(75) null,employeeId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(255) null,createDate DATE null,modifiedDate DATE null,employeeNo VARCHAR(75) null,fullName VARCHAR(500) null,title VARCHAR(255) null,gender INTEGER,birthdate DATE null,telNo VARCHAR(75) null,mobile VARCHAR(75) null,email VARCHAR(500) null,workingStatus INTEGER,mappingUserId LONG,mainJobPostId LONG,photoFileEntryId LONG,recruitDate DATE null,leaveDate DATE null,fileCertId LONG,fileSignId LONG,fileCertPath VARCHAR(500) null,fileSignPath VARCHAR(500) null,scope VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_employee";
	public static final String ORDER_BY_JPQL = " ORDER BY employee.employeeNo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_employee.employeeNo ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.usermgt.model.Employee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.usermgt.model.Employee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.usermgt.model.Employee"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long EMAIL_COLUMN_BITMASK = 2L;
	public static final long EMPLOYEEID_COLUMN_BITMASK = 4L;
	public static final long EMPLOYEENO_COLUMN_BITMASK = 8L;
	public static final long GROUPID_COLUMN_BITMASK = 16L;
	public static final long MAPPINGUSERID_COLUMN_BITMASK = 32L;
	public static final long USERID_COLUMN_BITMASK = 64L;
	public static final long UUID_COLUMN_BITMASK = 128L;
	public static final long WORKINGSTATUS_COLUMN_BITMASK = 256L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.usermgt.model.Employee"));

	public EmployeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Employee.class;
	}

	@Override
	public String getModelClassName() {
		return Employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("employeeNo", getEmployeeNo());
		attributes.put("fullName", getFullName());
		attributes.put("title", getTitle());
		attributes.put("gender", getGender());
		attributes.put("birthdate", getBirthdate());
		attributes.put("telNo", getTelNo());
		attributes.put("mobile", getMobile());
		attributes.put("email", getEmail());
		attributes.put("workingStatus", getWorkingStatus());
		attributes.put("mappingUserId", getMappingUserId());
		attributes.put("mainJobPostId", getMainJobPostId());
		attributes.put("photoFileEntryId", getPhotoFileEntryId());
		attributes.put("recruitDate", getRecruitDate());
		attributes.put("leaveDate", getLeaveDate());
		attributes.put("fileCertId", getFileCertId());
		attributes.put("fileSignId", getFileSignId());
		attributes.put("fileCertPath", getFileCertPath());
		attributes.put("fileSignPath", getFileSignPath());
		attributes.put("scope", getScope());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String employeeNo = (String)attributes.get("employeeNo");

		if (employeeNo != null) {
			setEmployeeNo(employeeNo);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Integer gender = (Integer)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		Date birthdate = (Date)attributes.get("birthdate");

		if (birthdate != null) {
			setBirthdate(birthdate);
		}

		String telNo = (String)attributes.get("telNo");

		if (telNo != null) {
			setTelNo(telNo);
		}

		String mobile = (String)attributes.get("mobile");

		if (mobile != null) {
			setMobile(mobile);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Integer workingStatus = (Integer)attributes.get("workingStatus");

		if (workingStatus != null) {
			setWorkingStatus(workingStatus);
		}

		Long mappingUserId = (Long)attributes.get("mappingUserId");

		if (mappingUserId != null) {
			setMappingUserId(mappingUserId);
		}

		Long mainJobPostId = (Long)attributes.get("mainJobPostId");

		if (mainJobPostId != null) {
			setMainJobPostId(mainJobPostId);
		}

		Long photoFileEntryId = (Long)attributes.get("photoFileEntryId");

		if (photoFileEntryId != null) {
			setPhotoFileEntryId(photoFileEntryId);
		}

		Date recruitDate = (Date)attributes.get("recruitDate");

		if (recruitDate != null) {
			setRecruitDate(recruitDate);
		}

		Date leaveDate = (Date)attributes.get("leaveDate");

		if (leaveDate != null) {
			setLeaveDate(leaveDate);
		}

		Long fileCertId = (Long)attributes.get("fileCertId");

		if (fileCertId != null) {
			setFileCertId(fileCertId);
		}

		Long fileSignId = (Long)attributes.get("fileSignId");

		if (fileSignId != null) {
			setFileSignId(fileSignId);
		}

		String fileCertPath = (String)attributes.get("fileCertPath");

		if (fileCertPath != null) {
			setFileCertPath(fileCertPath);
		}

		String fileSignPath = (String)attributes.get("fileSignPath");

		if (fileSignPath != null) {
			setFileSignPath(fileSignPath);
		}

		String scope = (String)attributes.get("scope");

		if (scope != null) {
			setScope(scope);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getEmployeeNo() {
		if (_employeeNo == null) {
			return "";
		}
		else {
			return _employeeNo;
		}
	}

	@Override
	public void setEmployeeNo(String employeeNo) {
		_columnBitmask = -1L;

		if (_originalEmployeeNo == null) {
			_originalEmployeeNo = _employeeNo;
		}

		_employeeNo = employeeNo;
	}

	public String getOriginalEmployeeNo() {
		return GetterUtil.getString(_originalEmployeeNo);
	}

	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		_gender = gender;
	}

	@Override
	public Date getBirthdate() {
		return _birthdate;
	}

	@Override
	public void setBirthdate(Date birthdate) {
		_birthdate = birthdate;
	}

	@Override
	public String getTelNo() {
		if (_telNo == null) {
			return "";
		}
		else {
			return _telNo;
		}
	}

	@Override
	public void setTelNo(String telNo) {
		_telNo = telNo;
	}

	@Override
	public String getMobile() {
		if (_mobile == null) {
			return "";
		}
		else {
			return _mobile;
		}
	}

	@Override
	public void setMobile(String mobile) {
		_mobile = mobile;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@Override
	public int getWorkingStatus() {
		return _workingStatus;
	}

	@Override
	public void setWorkingStatus(int workingStatus) {
		_columnBitmask |= WORKINGSTATUS_COLUMN_BITMASK;

		if (!_setOriginalWorkingStatus) {
			_setOriginalWorkingStatus = true;

			_originalWorkingStatus = _workingStatus;
		}

		_workingStatus = workingStatus;
	}

	public int getOriginalWorkingStatus() {
		return _originalWorkingStatus;
	}

	@Override
	public long getMappingUserId() {
		return _mappingUserId;
	}

	@Override
	public void setMappingUserId(long mappingUserId) {
		_columnBitmask |= MAPPINGUSERID_COLUMN_BITMASK;

		if (!_setOriginalMappingUserId) {
			_setOriginalMappingUserId = true;

			_originalMappingUserId = _mappingUserId;
		}

		_mappingUserId = mappingUserId;
	}

	@Override
	public String getMappingUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getMappingUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setMappingUserUuid(String mappingUserUuid) {
	}

	public long getOriginalMappingUserId() {
		return _originalMappingUserId;
	}

	@Override
	public long getMainJobPostId() {
		return _mainJobPostId;
	}

	@Override
	public void setMainJobPostId(long mainJobPostId) {
		_mainJobPostId = mainJobPostId;
	}

	@Override
	public long getPhotoFileEntryId() {
		return _photoFileEntryId;
	}

	@Override
	public void setPhotoFileEntryId(long photoFileEntryId) {
		_photoFileEntryId = photoFileEntryId;
	}

	@Override
	public Date getRecruitDate() {
		return _recruitDate;
	}

	@Override
	public void setRecruitDate(Date recruitDate) {
		_recruitDate = recruitDate;
	}

	@Override
	public Date getLeaveDate() {
		return _leaveDate;
	}

	@Override
	public void setLeaveDate(Date leaveDate) {
		_leaveDate = leaveDate;
	}

	@Override
	public long getFileCertId() {
		return _fileCertId;
	}

	@Override
	public void setFileCertId(long fileCertId) {
		_fileCertId = fileCertId;
	}

	@Override
	public long getFileSignId() {
		return _fileSignId;
	}

	@Override
	public void setFileSignId(long fileSignId) {
		_fileSignId = fileSignId;
	}

	@Override
	public String getFileCertPath() {
		if (_fileCertPath == null) {
			return "";
		}
		else {
			return _fileCertPath;
		}
	}

	@Override
	public void setFileCertPath(String fileCertPath) {
		_fileCertPath = fileCertPath;
	}

	@Override
	public String getFileSignPath() {
		if (_fileSignPath == null) {
			return "";
		}
		else {
			return _fileSignPath;
		}
	}

	@Override
	public void setFileSignPath(String fileSignPath) {
		_fileSignPath = fileSignPath;
	}

	@Override
	public String getScope() {
		if (_scope == null) {
			return "";
		}
		else {
			return _scope;
		}
	}

	@Override
	public void setScope(String scope) {
		_scope = scope;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Employee.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Employee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Employee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Employee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeImpl employeeImpl = new EmployeeImpl();

		employeeImpl.setUuid(getUuid());
		employeeImpl.setEmployeeId(getEmployeeId());
		employeeImpl.setCompanyId(getCompanyId());
		employeeImpl.setGroupId(getGroupId());
		employeeImpl.setUserId(getUserId());
		employeeImpl.setUserName(getUserName());
		employeeImpl.setCreateDate(getCreateDate());
		employeeImpl.setModifiedDate(getModifiedDate());
		employeeImpl.setEmployeeNo(getEmployeeNo());
		employeeImpl.setFullName(getFullName());
		employeeImpl.setTitle(getTitle());
		employeeImpl.setGender(getGender());
		employeeImpl.setBirthdate(getBirthdate());
		employeeImpl.setTelNo(getTelNo());
		employeeImpl.setMobile(getMobile());
		employeeImpl.setEmail(getEmail());
		employeeImpl.setWorkingStatus(getWorkingStatus());
		employeeImpl.setMappingUserId(getMappingUserId());
		employeeImpl.setMainJobPostId(getMainJobPostId());
		employeeImpl.setPhotoFileEntryId(getPhotoFileEntryId());
		employeeImpl.setRecruitDate(getRecruitDate());
		employeeImpl.setLeaveDate(getLeaveDate());
		employeeImpl.setFileCertId(getFileCertId());
		employeeImpl.setFileSignId(getFileSignId());
		employeeImpl.setFileCertPath(getFileCertPath());
		employeeImpl.setFileSignPath(getFileSignPath());
		employeeImpl.setScope(getScope());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public int compareTo(Employee employee) {
		int value = 0;

		value = getEmployeeNo().compareTo(employee.getEmployeeNo());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Employee)) {
			return false;
		}

		Employee employee = (Employee)obj;

		long primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmployeeModelImpl employeeModelImpl = this;

		employeeModelImpl._originalUuid = employeeModelImpl._uuid;

		employeeModelImpl._originalEmployeeId = employeeModelImpl._employeeId;

		employeeModelImpl._setOriginalEmployeeId = false;

		employeeModelImpl._originalCompanyId = employeeModelImpl._companyId;

		employeeModelImpl._setOriginalCompanyId = false;

		employeeModelImpl._originalGroupId = employeeModelImpl._groupId;

		employeeModelImpl._setOriginalGroupId = false;

		employeeModelImpl._originalUserId = employeeModelImpl._userId;

		employeeModelImpl._setOriginalUserId = false;

		employeeModelImpl._setModifiedDate = false;

		employeeModelImpl._originalEmployeeNo = employeeModelImpl._employeeNo;

		employeeModelImpl._originalEmail = employeeModelImpl._email;

		employeeModelImpl._originalWorkingStatus = employeeModelImpl._workingStatus;

		employeeModelImpl._setOriginalWorkingStatus = false;

		employeeModelImpl._originalMappingUserId = employeeModelImpl._mappingUserId;

		employeeModelImpl._setOriginalMappingUserId = false;

		employeeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Employee> toCacheModel() {
		EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

		employeeCacheModel.uuid = getUuid();

		String uuid = employeeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			employeeCacheModel.uuid = null;
		}

		employeeCacheModel.employeeId = getEmployeeId();

		employeeCacheModel.companyId = getCompanyId();

		employeeCacheModel.groupId = getGroupId();

		employeeCacheModel.userId = getUserId();

		employeeCacheModel.userName = getUserName();

		String userName = employeeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeCacheModel.employeeNo = getEmployeeNo();

		String employeeNo = employeeCacheModel.employeeNo;

		if ((employeeNo != null) && (employeeNo.length() == 0)) {
			employeeCacheModel.employeeNo = null;
		}

		employeeCacheModel.fullName = getFullName();

		String fullName = employeeCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			employeeCacheModel.fullName = null;
		}

		employeeCacheModel.title = getTitle();

		String title = employeeCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			employeeCacheModel.title = null;
		}

		employeeCacheModel.gender = getGender();

		Date birthdate = getBirthdate();

		if (birthdate != null) {
			employeeCacheModel.birthdate = birthdate.getTime();
		}
		else {
			employeeCacheModel.birthdate = Long.MIN_VALUE;
		}

		employeeCacheModel.telNo = getTelNo();

		String telNo = employeeCacheModel.telNo;

		if ((telNo != null) && (telNo.length() == 0)) {
			employeeCacheModel.telNo = null;
		}

		employeeCacheModel.mobile = getMobile();

		String mobile = employeeCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			employeeCacheModel.mobile = null;
		}

		employeeCacheModel.email = getEmail();

		String email = employeeCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			employeeCacheModel.email = null;
		}

		employeeCacheModel.workingStatus = getWorkingStatus();

		employeeCacheModel.mappingUserId = getMappingUserId();

		employeeCacheModel.mainJobPostId = getMainJobPostId();

		employeeCacheModel.photoFileEntryId = getPhotoFileEntryId();

		Date recruitDate = getRecruitDate();

		if (recruitDate != null) {
			employeeCacheModel.recruitDate = recruitDate.getTime();
		}
		else {
			employeeCacheModel.recruitDate = Long.MIN_VALUE;
		}

		Date leaveDate = getLeaveDate();

		if (leaveDate != null) {
			employeeCacheModel.leaveDate = leaveDate.getTime();
		}
		else {
			employeeCacheModel.leaveDate = Long.MIN_VALUE;
		}

		employeeCacheModel.fileCertId = getFileCertId();

		employeeCacheModel.fileSignId = getFileSignId();

		employeeCacheModel.fileCertPath = getFileCertPath();

		String fileCertPath = employeeCacheModel.fileCertPath;

		if ((fileCertPath != null) && (fileCertPath.length() == 0)) {
			employeeCacheModel.fileCertPath = null;
		}

		employeeCacheModel.fileSignPath = getFileSignPath();

		String fileSignPath = employeeCacheModel.fileSignPath;

		if ((fileSignPath != null) && (fileSignPath.length() == 0)) {
			employeeCacheModel.fileSignPath = null;
		}

		employeeCacheModel.scope = getScope();

		String scope = employeeCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			employeeCacheModel.scope = null;
		}

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(55);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", employeeNo=");
		sb.append(getEmployeeNo());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", birthdate=");
		sb.append(getBirthdate());
		sb.append(", telNo=");
		sb.append(getTelNo());
		sb.append(", mobile=");
		sb.append(getMobile());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", workingStatus=");
		sb.append(getWorkingStatus());
		sb.append(", mappingUserId=");
		sb.append(getMappingUserId());
		sb.append(", mainJobPostId=");
		sb.append(getMainJobPostId());
		sb.append(", photoFileEntryId=");
		sb.append(getPhotoFileEntryId());
		sb.append(", recruitDate=");
		sb.append(getRecruitDate());
		sb.append(", leaveDate=");
		sb.append(getLeaveDate());
		sb.append(", fileCertId=");
		sb.append(getFileCertId());
		sb.append(", fileSignId=");
		sb.append(getFileSignId());
		sb.append(", fileCertPath=");
		sb.append(getFileCertPath());
		sb.append(", fileSignPath=");
		sb.append(getFileSignPath());
		sb.append(", scope=");
		sb.append(getScope());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(85);

		sb.append("<model><model-name>");
		sb.append("org.opencps.usermgt.model.Employee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeNo</column-name><column-value><![CDATA[");
		sb.append(getEmployeeNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthdate</column-name><column-value><![CDATA[");
		sb.append(getBirthdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telNo</column-name><column-value><![CDATA[");
		sb.append(getTelNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobile</column-name><column-value><![CDATA[");
		sb.append(getMobile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workingStatus</column-name><column-value><![CDATA[");
		sb.append(getWorkingStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mappingUserId</column-name><column-value><![CDATA[");
		sb.append(getMappingUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mainJobPostId</column-name><column-value><![CDATA[");
		sb.append(getMainJobPostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>photoFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getPhotoFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recruitDate</column-name><column-value><![CDATA[");
		sb.append(getRecruitDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveDate</column-name><column-value><![CDATA[");
		sb.append(getLeaveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileCertId</column-name><column-value><![CDATA[");
		sb.append(getFileCertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileSignId</column-name><column-value><![CDATA[");
		sb.append(getFileSignId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileCertPath</column-name><column-value><![CDATA[");
		sb.append(getFileCertPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileSignPath</column-name><column-value><![CDATA[");
		sb.append(getFileSignPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scope</column-name><column-value><![CDATA[");
		sb.append(getScope());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Employee.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Employee.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _employeeNo;
	private String _originalEmployeeNo;
	private String _fullName;
	private String _title;
	private int _gender;
	private Date _birthdate;
	private String _telNo;
	private String _mobile;
	private String _email;
	private String _originalEmail;
	private int _workingStatus;
	private int _originalWorkingStatus;
	private boolean _setOriginalWorkingStatus;
	private long _mappingUserId;
	private long _originalMappingUserId;
	private boolean _setOriginalMappingUserId;
	private long _mainJobPostId;
	private long _photoFileEntryId;
	private Date _recruitDate;
	private Date _leaveDate;
	private long _fileCertId;
	private long _fileSignId;
	private String _fileCertPath;
	private String _fileSignPath;
	private String _scope;
	private long _columnBitmask;
	private Employee _escapedModel;
}