/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package pay.gate.integration.dvc.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import pay.gate.integration.dvc.model.ApdungDVC;
import pay.gate.integration.dvc.service.ApdungDVCLocalService;
import pay.gate.integration.dvc.service.persistence.ApdungDVCPersistence;
import pay.gate.integration.dvc.service.persistence.PhiLePhiPersistence;
import pay.gate.integration.dvc.service.persistence.ServiceConfigMappingPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the apdung dvc local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link pay.gate.integration.dvc.service.impl.ApdungDVCLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see pay.gate.integration.dvc.service.impl.ApdungDVCLocalServiceImpl
 * @see pay.gate.integration.dvc.service.ApdungDVCLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ApdungDVCLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ApdungDVCLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link pay.gate.integration.dvc.service.ApdungDVCLocalServiceUtil} to access the apdung dvc local service.
	 */

	/**
	 * Adds the apdung dvc to the database. Also notifies the appropriate model listeners.
	 *
	 * @param apdungDVC the apdung dvc
	 * @return the apdung dvc that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ApdungDVC addApdungDVC(ApdungDVC apdungDVC) {
		apdungDVC.setNew(true);

		return apdungDVCPersistence.update(apdungDVC);
	}

	/**
	 * Creates a new apdung dvc with the primary key. Does not add the apdung dvc to the database.
	 *
	 * @param apdungDVCId the primary key for the new apdung dvc
	 * @return the new apdung dvc
	 */
	@Override
	@Transactional(enabled = false)
	public ApdungDVC createApdungDVC(long apdungDVCId) {
		return apdungDVCPersistence.create(apdungDVCId);
	}

	/**
	 * Deletes the apdung dvc with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param apdungDVCId the primary key of the apdung dvc
	 * @return the apdung dvc that was removed
	 * @throws PortalException if a apdung dvc with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ApdungDVC deleteApdungDVC(long apdungDVCId)
		throws PortalException {
		return apdungDVCPersistence.remove(apdungDVCId);
	}

	/**
	 * Deletes the apdung dvc from the database. Also notifies the appropriate model listeners.
	 *
	 * @param apdungDVC the apdung dvc
	 * @return the apdung dvc that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ApdungDVC deleteApdungDVC(ApdungDVC apdungDVC) {
		return apdungDVCPersistence.remove(apdungDVC);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ApdungDVC.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return apdungDVCPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link pay.gate.integration.dvc.model.impl.ApdungDVCModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return apdungDVCPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link pay.gate.integration.dvc.model.impl.ApdungDVCModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return apdungDVCPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return apdungDVCPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return apdungDVCPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ApdungDVC fetchApdungDVC(long apdungDVCId) {
		return apdungDVCPersistence.fetchByPrimaryKey(apdungDVCId);
	}

	/**
	 * Returns the apdung dvc matching the UUID and group.
	 *
	 * @param uuid the apdung dvc's UUID
	 * @param groupId the primary key of the group
	 * @return the matching apdung dvc, or <code>null</code> if a matching apdung dvc could not be found
	 */
	@Override
	public ApdungDVC fetchApdungDVCByUuidAndGroupId(String uuid, long groupId) {
		return apdungDVCPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the apdung dvc with the primary key.
	 *
	 * @param apdungDVCId the primary key of the apdung dvc
	 * @return the apdung dvc
	 * @throws PortalException if a apdung dvc with the primary key could not be found
	 */
	@Override
	public ApdungDVC getApdungDVC(long apdungDVCId) throws PortalException {
		return apdungDVCPersistence.findByPrimaryKey(apdungDVCId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(apdungDVCLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ApdungDVC.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("apdungDVCId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(apdungDVCLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ApdungDVC.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("apdungDVCId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(apdungDVCLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ApdungDVC.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("apdungDVCId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<ApdungDVC>() {
				@Override
				public void performAction(ApdungDVC apdungDVC)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						apdungDVC);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(ApdungDVC.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return apdungDVCLocalService.deleteApdungDVC((ApdungDVC)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return apdungDVCPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the apdung dvcs matching the UUID and company.
	 *
	 * @param uuid the UUID of the apdung dvcs
	 * @param companyId the primary key of the company
	 * @return the matching apdung dvcs, or an empty list if no matches were found
	 */
	@Override
	public List<ApdungDVC> getApdungDVCsByUuidAndCompanyId(String uuid,
		long companyId) {
		return apdungDVCPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of apdung dvcs matching the UUID and company.
	 *
	 * @param uuid the UUID of the apdung dvcs
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of apdung dvcs
	 * @param end the upper bound of the range of apdung dvcs (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching apdung dvcs, or an empty list if no matches were found
	 */
	@Override
	public List<ApdungDVC> getApdungDVCsByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<ApdungDVC> orderByComparator) {
		return apdungDVCPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the apdung dvc matching the UUID and group.
	 *
	 * @param uuid the apdung dvc's UUID
	 * @param groupId the primary key of the group
	 * @return the matching apdung dvc
	 * @throws PortalException if a matching apdung dvc could not be found
	 */
	@Override
	public ApdungDVC getApdungDVCByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return apdungDVCPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the apdung dvcs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link pay.gate.integration.dvc.model.impl.ApdungDVCModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of apdung dvcs
	 * @param end the upper bound of the range of apdung dvcs (not inclusive)
	 * @return the range of apdung dvcs
	 */
	@Override
	public List<ApdungDVC> getApdungDVCs(int start, int end) {
		return apdungDVCPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of apdung dvcs.
	 *
	 * @return the number of apdung dvcs
	 */
	@Override
	public int getApdungDVCsCount() {
		return apdungDVCPersistence.countAll();
	}

	/**
	 * Updates the apdung dvc in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param apdungDVC the apdung dvc
	 * @return the apdung dvc that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ApdungDVC updateApdungDVC(ApdungDVC apdungDVC) {
		return apdungDVCPersistence.update(apdungDVC);
	}

	/**
	 * Returns the apdung dvc local service.
	 *
	 * @return the apdung dvc local service
	 */
	public ApdungDVCLocalService getApdungDVCLocalService() {
		return apdungDVCLocalService;
	}

	/**
	 * Sets the apdung dvc local service.
	 *
	 * @param apdungDVCLocalService the apdung dvc local service
	 */
	public void setApdungDVCLocalService(
		ApdungDVCLocalService apdungDVCLocalService) {
		this.apdungDVCLocalService = apdungDVCLocalService;
	}

	/**
	 * Returns the apdung dvc persistence.
	 *
	 * @return the apdung dvc persistence
	 */
	public ApdungDVCPersistence getApdungDVCPersistence() {
		return apdungDVCPersistence;
	}

	/**
	 * Sets the apdung dvc persistence.
	 *
	 * @param apdungDVCPersistence the apdung dvc persistence
	 */
	public void setApdungDVCPersistence(
		ApdungDVCPersistence apdungDVCPersistence) {
		this.apdungDVCPersistence = apdungDVCPersistence;
	}

	/**
	 * Returns the phi le phi local service.
	 *
	 * @return the phi le phi local service
	 */
	public pay.gate.integration.dvc.service.PhiLePhiLocalService getPhiLePhiLocalService() {
		return phiLePhiLocalService;
	}

	/**
	 * Sets the phi le phi local service.
	 *
	 * @param phiLePhiLocalService the phi le phi local service
	 */
	public void setPhiLePhiLocalService(
		pay.gate.integration.dvc.service.PhiLePhiLocalService phiLePhiLocalService) {
		this.phiLePhiLocalService = phiLePhiLocalService;
	}

	/**
	 * Returns the phi le phi persistence.
	 *
	 * @return the phi le phi persistence
	 */
	public PhiLePhiPersistence getPhiLePhiPersistence() {
		return phiLePhiPersistence;
	}

	/**
	 * Sets the phi le phi persistence.
	 *
	 * @param phiLePhiPersistence the phi le phi persistence
	 */
	public void setPhiLePhiPersistence(PhiLePhiPersistence phiLePhiPersistence) {
		this.phiLePhiPersistence = phiLePhiPersistence;
	}

	/**
	 * Returns the service config mapping local service.
	 *
	 * @return the service config mapping local service
	 */
	public pay.gate.integration.dvc.service.ServiceConfigMappingLocalService getServiceConfigMappingLocalService() {
		return serviceConfigMappingLocalService;
	}

	/**
	 * Sets the service config mapping local service.
	 *
	 * @param serviceConfigMappingLocalService the service config mapping local service
	 */
	public void setServiceConfigMappingLocalService(
		pay.gate.integration.dvc.service.ServiceConfigMappingLocalService serviceConfigMappingLocalService) {
		this.serviceConfigMappingLocalService = serviceConfigMappingLocalService;
	}

	/**
	 * Returns the service config mapping persistence.
	 *
	 * @return the service config mapping persistence
	 */
	public ServiceConfigMappingPersistence getServiceConfigMappingPersistence() {
		return serviceConfigMappingPersistence;
	}

	/**
	 * Sets the service config mapping persistence.
	 *
	 * @param serviceConfigMappingPersistence the service config mapping persistence
	 */
	public void setServiceConfigMappingPersistence(
		ServiceConfigMappingPersistence serviceConfigMappingPersistence) {
		this.serviceConfigMappingPersistence = serviceConfigMappingPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("pay.gate.integration.dvc.model.ApdungDVC",
			apdungDVCLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"pay.gate.integration.dvc.model.ApdungDVC");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ApdungDVCLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ApdungDVC.class;
	}

	protected String getModelClassName() {
		return ApdungDVC.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = apdungDVCPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ApdungDVCLocalService.class)
	protected ApdungDVCLocalService apdungDVCLocalService;
	@BeanReference(type = ApdungDVCPersistence.class)
	protected ApdungDVCPersistence apdungDVCPersistence;
	@BeanReference(type = pay.gate.integration.dvc.service.PhiLePhiLocalService.class)
	protected pay.gate.integration.dvc.service.PhiLePhiLocalService phiLePhiLocalService;
	@BeanReference(type = PhiLePhiPersistence.class)
	protected PhiLePhiPersistence phiLePhiPersistence;
	@BeanReference(type = pay.gate.integration.dvc.service.ServiceConfigMappingLocalService.class)
	protected pay.gate.integration.dvc.service.ServiceConfigMappingLocalService serviceConfigMappingLocalService;
	@BeanReference(type = ServiceConfigMappingPersistence.class)
	protected ServiceConfigMappingPersistence serviceConfigMappingPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}