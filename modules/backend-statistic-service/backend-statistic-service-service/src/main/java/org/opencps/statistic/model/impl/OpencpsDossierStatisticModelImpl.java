/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.statistic.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.statistic.model.OpencpsDossierStatistic;
import org.opencps.statistic.model.OpencpsDossierStatisticModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OpencpsDossierStatistic service. Represents a row in the &quot;opencps_statistic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link OpencpsDossierStatisticModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OpencpsDossierStatisticImpl}.
 * </p>
 *
 * @author khoavu
 * @see OpencpsDossierStatisticImpl
 * @see OpencpsDossierStatistic
 * @see OpencpsDossierStatisticModel
 * @generated
 */
@ProviderType
public class OpencpsDossierStatisticModelImpl extends BaseModelImpl<OpencpsDossierStatistic>
	implements OpencpsDossierStatisticModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a opencps dossier statistic model instance should use the {@link OpencpsDossierStatistic} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_statistic";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dossierStatisticId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "month", Types.INTEGER },
			{ "year", Types.INTEGER },
			{ "totalCount", Types.INTEGER },
			{ "deniedCount", Types.INTEGER },
			{ "cancelledCount", Types.INTEGER },
			{ "processCount", Types.INTEGER },
			{ "remainingCount", Types.INTEGER },
			{ "receivedCount", Types.INTEGER },
			{ "onlineCount", Types.INTEGER },
			{ "onegateCount", Types.INTEGER },
			{ "releaseCount", Types.INTEGER },
			{ "betimesCount", Types.INTEGER },
			{ "ontimeCount", Types.INTEGER },
			{ "overtimeCount", Types.INTEGER },
			{ "doneCount", Types.INTEGER },
			{ "releasingCount", Types.INTEGER },
			{ "unresolvedCount", Types.INTEGER },
			{ "processingCount", Types.INTEGER },
			{ "undueCount", Types.INTEGER },
			{ "overdueCount", Types.INTEGER },
			{ "pausingCount", Types.INTEGER },
			{ "ontimePercentage", Types.INTEGER },
			{ "govAgencyCode", Types.VARCHAR },
			{ "groupAgencyCode", Types.VARCHAR },
			{ "govAgencyName", Types.VARCHAR },
			{ "domainCode", Types.VARCHAR },
			{ "domainName", Types.VARCHAR },
			{ "reporting", Types.INTEGER },
			{ "overtimeInside", Types.INTEGER },
			{ "overtimeOutside", Types.INTEGER },
			{ "interoperatingCount", Types.INTEGER },
			{ "waitingCount", Types.INTEGER },
			{ "outsideCount", Types.INTEGER },
			{ "insideCount", Types.INTEGER },
			{ "system", Types.VARCHAR },
			{ "viaPostalCount", Types.INTEGER },
			{ "notViaPostalCount", Types.INTEGER },
			{ "saturdayCount", Types.INTEGER },
			{ "dossierOnline3Count", Types.INTEGER },
			{ "dossierOnline4Count", Types.INTEGER },
			{ "receiveDossierSatCount", Types.INTEGER },
			{ "releaseDossierSatCount", Types.INTEGER },
			{ "fromViaPostalCount", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierStatisticId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("month", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("deniedCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("cancelledCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("processCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("remainingCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("receivedCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("onlineCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("onegateCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("releaseCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("betimesCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ontimeCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("overtimeCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("doneCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("releasingCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("unresolvedCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("processingCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("undueCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("overdueCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("pausingCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ontimePercentage", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("govAgencyCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupAgencyCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("govAgencyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domainCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domainName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reporting", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("overtimeInside", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("overtimeOutside", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("interoperatingCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("waitingCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("outsideCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("insideCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("system", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("viaPostalCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("notViaPostalCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("saturdayCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dossierOnline3Count", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dossierOnline4Count", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("receiveDossierSatCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("releaseDossierSatCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("fromViaPostalCount", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_statistic (uuid_ VARCHAR(75) null,dossierStatisticId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(255) null,createDate DATE null,modifiedDate DATE null,month INTEGER,year INTEGER,totalCount INTEGER,deniedCount INTEGER,cancelledCount INTEGER,processCount INTEGER,remainingCount INTEGER,receivedCount INTEGER,onlineCount INTEGER,onegateCount INTEGER,releaseCount INTEGER,betimesCount INTEGER,ontimeCount INTEGER,overtimeCount INTEGER,doneCount INTEGER,releasingCount INTEGER,unresolvedCount INTEGER,processingCount INTEGER,undueCount INTEGER,overdueCount INTEGER,pausingCount INTEGER,ontimePercentage INTEGER,govAgencyCode VARCHAR(255) null,groupAgencyCode TEXT null,govAgencyName TEXT null,domainCode VARCHAR(255) null,domainName TEXT null,reporting INTEGER,overtimeInside INTEGER,overtimeOutside INTEGER,interoperatingCount INTEGER,waitingCount INTEGER,outsideCount INTEGER,insideCount INTEGER,system VARCHAR(75) null,viaPostalCount INTEGER,notViaPostalCount INTEGER,saturdayCount INTEGER,dossierOnline3Count INTEGER,dossierOnline4Count INTEGER,receiveDossierSatCount INTEGER,releaseDossierSatCount INTEGER,fromViaPostalCount INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_statistic";
	public static final String ORDER_BY_JPQL = " ORDER BY opencpsDossierStatistic.dossierStatisticId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_statistic.dossierStatisticId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(StatisticService.backend.statistic.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.statistic.model.OpencpsDossierStatistic"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(StatisticService.backend.statistic.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.statistic.model.OpencpsDossierStatistic"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(StatisticService.backend.statistic.service.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.statistic.model.OpencpsDossierStatistic"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long DOMAINCODE_COLUMN_BITMASK = 2L;
	public static final long GOVAGENCYCODE_COLUMN_BITMASK = 4L;
	public static final long GROUPAGENCYCODE_COLUMN_BITMASK = 8L;
	public static final long GROUPID_COLUMN_BITMASK = 16L;
	public static final long MONTH_COLUMN_BITMASK = 32L;
	public static final long REPORTING_COLUMN_BITMASK = 64L;
	public static final long SYSTEM_COLUMN_BITMASK = 128L;
	public static final long USERID_COLUMN_BITMASK = 256L;
	public static final long UUID_COLUMN_BITMASK = 512L;
	public static final long YEAR_COLUMN_BITMASK = 1024L;
	public static final long DOSSIERSTATISTICID_COLUMN_BITMASK = 2048L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(StatisticService.backend.statistic.service.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.statistic.model.OpencpsDossierStatistic"));

	public OpencpsDossierStatisticModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierStatisticId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierStatisticId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierStatisticId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OpencpsDossierStatistic.class;
	}

	@Override
	public String getModelClassName() {
		return OpencpsDossierStatistic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dossierStatisticId", getDossierStatisticId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("month", getMonth());
		attributes.put("year", getYear());
		attributes.put("totalCount", getTotalCount());
		attributes.put("deniedCount", getDeniedCount());
		attributes.put("cancelledCount", getCancelledCount());
		attributes.put("processCount", getProcessCount());
		attributes.put("remainingCount", getRemainingCount());
		attributes.put("receivedCount", getReceivedCount());
		attributes.put("onlineCount", getOnlineCount());
		attributes.put("onegateCount", getOnegateCount());
		attributes.put("releaseCount", getReleaseCount());
		attributes.put("betimesCount", getBetimesCount());
		attributes.put("ontimeCount", getOntimeCount());
		attributes.put("overtimeCount", getOvertimeCount());
		attributes.put("doneCount", getDoneCount());
		attributes.put("releasingCount", getReleasingCount());
		attributes.put("unresolvedCount", getUnresolvedCount());
		attributes.put("processingCount", getProcessingCount());
		attributes.put("undueCount", getUndueCount());
		attributes.put("overdueCount", getOverdueCount());
		attributes.put("pausingCount", getPausingCount());
		attributes.put("ontimePercentage", getOntimePercentage());
		attributes.put("govAgencyCode", getGovAgencyCode());
		attributes.put("groupAgencyCode", getGroupAgencyCode());
		attributes.put("govAgencyName", getGovAgencyName());
		attributes.put("domainCode", getDomainCode());
		attributes.put("domainName", getDomainName());
		attributes.put("reporting", getReporting());
		attributes.put("overtimeInside", getOvertimeInside());
		attributes.put("overtimeOutside", getOvertimeOutside());
		attributes.put("interoperatingCount", getInteroperatingCount());
		attributes.put("waitingCount", getWaitingCount());
		attributes.put("outsideCount", getOutsideCount());
		attributes.put("insideCount", getInsideCount());
		attributes.put("system", getSystem());
		attributes.put("viaPostalCount", getViaPostalCount());
		attributes.put("notViaPostalCount", getNotViaPostalCount());
		attributes.put("saturdayCount", getSaturdayCount());
		attributes.put("dossierOnline3Count", getDossierOnline3Count());
		attributes.put("dossierOnline4Count", getDossierOnline4Count());
		attributes.put("receiveDossierSatCount", getReceiveDossierSatCount());
		attributes.put("releaseDossierSatCount", getReleaseDossierSatCount());
		attributes.put("fromViaPostalCount", getFromViaPostalCount());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dossierStatisticId = (Long)attributes.get("dossierStatisticId");

		if (dossierStatisticId != null) {
			setDossierStatisticId(dossierStatisticId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer totalCount = (Integer)attributes.get("totalCount");

		if (totalCount != null) {
			setTotalCount(totalCount);
		}

		Integer deniedCount = (Integer)attributes.get("deniedCount");

		if (deniedCount != null) {
			setDeniedCount(deniedCount);
		}

		Integer cancelledCount = (Integer)attributes.get("cancelledCount");

		if (cancelledCount != null) {
			setCancelledCount(cancelledCount);
		}

		Integer processCount = (Integer)attributes.get("processCount");

		if (processCount != null) {
			setProcessCount(processCount);
		}

		Integer remainingCount = (Integer)attributes.get("remainingCount");

		if (remainingCount != null) {
			setRemainingCount(remainingCount);
		}

		Integer receivedCount = (Integer)attributes.get("receivedCount");

		if (receivedCount != null) {
			setReceivedCount(receivedCount);
		}

		Integer onlineCount = (Integer)attributes.get("onlineCount");

		if (onlineCount != null) {
			setOnlineCount(onlineCount);
		}

		Integer onegateCount = (Integer)attributes.get("onegateCount");

		if (onegateCount != null) {
			setOnegateCount(onegateCount);
		}

		Integer releaseCount = (Integer)attributes.get("releaseCount");

		if (releaseCount != null) {
			setReleaseCount(releaseCount);
		}

		Integer betimesCount = (Integer)attributes.get("betimesCount");

		if (betimesCount != null) {
			setBetimesCount(betimesCount);
		}

		Integer ontimeCount = (Integer)attributes.get("ontimeCount");

		if (ontimeCount != null) {
			setOntimeCount(ontimeCount);
		}

		Integer overtimeCount = (Integer)attributes.get("overtimeCount");

		if (overtimeCount != null) {
			setOvertimeCount(overtimeCount);
		}

		Integer doneCount = (Integer)attributes.get("doneCount");

		if (doneCount != null) {
			setDoneCount(doneCount);
		}

		Integer releasingCount = (Integer)attributes.get("releasingCount");

		if (releasingCount != null) {
			setReleasingCount(releasingCount);
		}

		Integer unresolvedCount = (Integer)attributes.get("unresolvedCount");

		if (unresolvedCount != null) {
			setUnresolvedCount(unresolvedCount);
		}

		Integer processingCount = (Integer)attributes.get("processingCount");

		if (processingCount != null) {
			setProcessingCount(processingCount);
		}

		Integer undueCount = (Integer)attributes.get("undueCount");

		if (undueCount != null) {
			setUndueCount(undueCount);
		}

		Integer overdueCount = (Integer)attributes.get("overdueCount");

		if (overdueCount != null) {
			setOverdueCount(overdueCount);
		}

		Integer pausingCount = (Integer)attributes.get("pausingCount");

		if (pausingCount != null) {
			setPausingCount(pausingCount);
		}

		Integer ontimePercentage = (Integer)attributes.get("ontimePercentage");

		if (ontimePercentage != null) {
			setOntimePercentage(ontimePercentage);
		}

		String govAgencyCode = (String)attributes.get("govAgencyCode");

		if (govAgencyCode != null) {
			setGovAgencyCode(govAgencyCode);
		}

		String groupAgencyCode = (String)attributes.get("groupAgencyCode");

		if (groupAgencyCode != null) {
			setGroupAgencyCode(groupAgencyCode);
		}

		String govAgencyName = (String)attributes.get("govAgencyName");

		if (govAgencyName != null) {
			setGovAgencyName(govAgencyName);
		}

		String domainCode = (String)attributes.get("domainCode");

		if (domainCode != null) {
			setDomainCode(domainCode);
		}

		String domainName = (String)attributes.get("domainName");

		if (domainName != null) {
			setDomainName(domainName);
		}

		Integer reporting = (Integer)attributes.get("reporting");

		if (reporting != null) {
			setReporting(reporting);
		}

		Integer overtimeInside = (Integer)attributes.get("overtimeInside");

		if (overtimeInside != null) {
			setOvertimeInside(overtimeInside);
		}

		Integer overtimeOutside = (Integer)attributes.get("overtimeOutside");

		if (overtimeOutside != null) {
			setOvertimeOutside(overtimeOutside);
		}

		Integer interoperatingCount = (Integer)attributes.get(
				"interoperatingCount");

		if (interoperatingCount != null) {
			setInteroperatingCount(interoperatingCount);
		}

		Integer waitingCount = (Integer)attributes.get("waitingCount");

		if (waitingCount != null) {
			setWaitingCount(waitingCount);
		}

		Integer outsideCount = (Integer)attributes.get("outsideCount");

		if (outsideCount != null) {
			setOutsideCount(outsideCount);
		}

		Integer insideCount = (Integer)attributes.get("insideCount");

		if (insideCount != null) {
			setInsideCount(insideCount);
		}

		String system = (String)attributes.get("system");

		if (system != null) {
			setSystem(system);
		}

		Integer viaPostalCount = (Integer)attributes.get("viaPostalCount");

		if (viaPostalCount != null) {
			setViaPostalCount(viaPostalCount);
		}

		Integer notViaPostalCount = (Integer)attributes.get("notViaPostalCount");

		if (notViaPostalCount != null) {
			setNotViaPostalCount(notViaPostalCount);
		}

		Integer saturdayCount = (Integer)attributes.get("saturdayCount");

		if (saturdayCount != null) {
			setSaturdayCount(saturdayCount);
		}

		Integer dossierOnline3Count = (Integer)attributes.get(
				"dossierOnline3Count");

		if (dossierOnline3Count != null) {
			setDossierOnline3Count(dossierOnline3Count);
		}

		Integer dossierOnline4Count = (Integer)attributes.get(
				"dossierOnline4Count");

		if (dossierOnline4Count != null) {
			setDossierOnline4Count(dossierOnline4Count);
		}

		Integer receiveDossierSatCount = (Integer)attributes.get(
				"receiveDossierSatCount");

		if (receiveDossierSatCount != null) {
			setReceiveDossierSatCount(receiveDossierSatCount);
		}

		Integer releaseDossierSatCount = (Integer)attributes.get(
				"releaseDossierSatCount");

		if (releaseDossierSatCount != null) {
			setReleaseDossierSatCount(releaseDossierSatCount);
		}

		Integer fromViaPostalCount = (Integer)attributes.get(
				"fromViaPostalCount");

		if (fromViaPostalCount != null) {
			setFromViaPostalCount(fromViaPostalCount);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDossierStatisticId() {
		return _dossierStatisticId;
	}

	@Override
	public void setDossierStatisticId(long dossierStatisticId) {
		_dossierStatisticId = dossierStatisticId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_columnBitmask |= MONTH_COLUMN_BITMASK;

		if (!_setOriginalMonth) {
			_setOriginalMonth = true;

			_originalMonth = _month;
		}

		_month = month;
	}

	public int getOriginalMonth() {
		return _originalMonth;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_columnBitmask |= YEAR_COLUMN_BITMASK;

		if (!_setOriginalYear) {
			_setOriginalYear = true;

			_originalYear = _year;
		}

		_year = year;
	}

	public int getOriginalYear() {
		return _originalYear;
	}

	@Override
	public int getTotalCount() {
		return _totalCount;
	}

	@Override
	public void setTotalCount(int totalCount) {
		_totalCount = totalCount;
	}

	@Override
	public int getDeniedCount() {
		return _deniedCount;
	}

	@Override
	public void setDeniedCount(int deniedCount) {
		_deniedCount = deniedCount;
	}

	@Override
	public int getCancelledCount() {
		return _cancelledCount;
	}

	@Override
	public void setCancelledCount(int cancelledCount) {
		_cancelledCount = cancelledCount;
	}

	@Override
	public int getProcessCount() {
		return _processCount;
	}

	@Override
	public void setProcessCount(int processCount) {
		_processCount = processCount;
	}

	@Override
	public int getRemainingCount() {
		return _remainingCount;
	}

	@Override
	public void setRemainingCount(int remainingCount) {
		_remainingCount = remainingCount;
	}

	@Override
	public int getReceivedCount() {
		return _receivedCount;
	}

	@Override
	public void setReceivedCount(int receivedCount) {
		_receivedCount = receivedCount;
	}

	@Override
	public int getOnlineCount() {
		return _onlineCount;
	}

	@Override
	public void setOnlineCount(int onlineCount) {
		_onlineCount = onlineCount;
	}

	@Override
	public int getOnegateCount() {
		return _onegateCount;
	}

	@Override
	public void setOnegateCount(int onegateCount) {
		_onegateCount = onegateCount;
	}

	@Override
	public int getReleaseCount() {
		return _releaseCount;
	}

	@Override
	public void setReleaseCount(int releaseCount) {
		_releaseCount = releaseCount;
	}

	@Override
	public int getBetimesCount() {
		return _betimesCount;
	}

	@Override
	public void setBetimesCount(int betimesCount) {
		_betimesCount = betimesCount;
	}

	@Override
	public int getOntimeCount() {
		return _ontimeCount;
	}

	@Override
	public void setOntimeCount(int ontimeCount) {
		_ontimeCount = ontimeCount;
	}

	@Override
	public int getOvertimeCount() {
		return _overtimeCount;
	}

	@Override
	public void setOvertimeCount(int overtimeCount) {
		_overtimeCount = overtimeCount;
	}

	@Override
	public int getDoneCount() {
		return _doneCount;
	}

	@Override
	public void setDoneCount(int doneCount) {
		_doneCount = doneCount;
	}

	@Override
	public int getReleasingCount() {
		return _releasingCount;
	}

	@Override
	public void setReleasingCount(int releasingCount) {
		_releasingCount = releasingCount;
	}

	@Override
	public int getUnresolvedCount() {
		return _unresolvedCount;
	}

	@Override
	public void setUnresolvedCount(int unresolvedCount) {
		_unresolvedCount = unresolvedCount;
	}

	@Override
	public int getProcessingCount() {
		return _processingCount;
	}

	@Override
	public void setProcessingCount(int processingCount) {
		_processingCount = processingCount;
	}

	@Override
	public int getUndueCount() {
		return _undueCount;
	}

	@Override
	public void setUndueCount(int undueCount) {
		_undueCount = undueCount;
	}

	@Override
	public int getOverdueCount() {
		return _overdueCount;
	}

	@Override
	public void setOverdueCount(int overdueCount) {
		_overdueCount = overdueCount;
	}

	@Override
	public int getPausingCount() {
		return _pausingCount;
	}

	@Override
	public void setPausingCount(int pausingCount) {
		_pausingCount = pausingCount;
	}

	@Override
	public int getOntimePercentage() {
		return _ontimePercentage;
	}

	@Override
	public void setOntimePercentage(int ontimePercentage) {
		_ontimePercentage = ontimePercentage;
	}

	@Override
	public String getGovAgencyCode() {
		if (_govAgencyCode == null) {
			return "";
		}
		else {
			return _govAgencyCode;
		}
	}

	@Override
	public void setGovAgencyCode(String govAgencyCode) {
		_columnBitmask |= GOVAGENCYCODE_COLUMN_BITMASK;

		if (_originalGovAgencyCode == null) {
			_originalGovAgencyCode = _govAgencyCode;
		}

		_govAgencyCode = govAgencyCode;
	}

	public String getOriginalGovAgencyCode() {
		return GetterUtil.getString(_originalGovAgencyCode);
	}

	@Override
	public String getGroupAgencyCode() {
		if (_groupAgencyCode == null) {
			return "";
		}
		else {
			return _groupAgencyCode;
		}
	}

	@Override
	public void setGroupAgencyCode(String groupAgencyCode) {
		_columnBitmask |= GROUPAGENCYCODE_COLUMN_BITMASK;

		if (_originalGroupAgencyCode == null) {
			_originalGroupAgencyCode = _groupAgencyCode;
		}

		_groupAgencyCode = groupAgencyCode;
	}

	public String getOriginalGroupAgencyCode() {
		return GetterUtil.getString(_originalGroupAgencyCode);
	}

	@Override
	public String getGovAgencyName() {
		if (_govAgencyName == null) {
			return "";
		}
		else {
			return _govAgencyName;
		}
	}

	@Override
	public void setGovAgencyName(String govAgencyName) {
		_govAgencyName = govAgencyName;
	}

	@Override
	public String getDomainCode() {
		if (_domainCode == null) {
			return "";
		}
		else {
			return _domainCode;
		}
	}

	@Override
	public void setDomainCode(String domainCode) {
		_columnBitmask |= DOMAINCODE_COLUMN_BITMASK;

		if (_originalDomainCode == null) {
			_originalDomainCode = _domainCode;
		}

		_domainCode = domainCode;
	}

	public String getOriginalDomainCode() {
		return GetterUtil.getString(_originalDomainCode);
	}

	@Override
	public String getDomainName() {
		if (_domainName == null) {
			return "";
		}
		else {
			return _domainName;
		}
	}

	@Override
	public void setDomainName(String domainName) {
		_domainName = domainName;
	}

	@Override
	public int getReporting() {
		return _reporting;
	}

	@Override
	public void setReporting(int reporting) {
		_columnBitmask |= REPORTING_COLUMN_BITMASK;

		if (!_setOriginalReporting) {
			_setOriginalReporting = true;

			_originalReporting = _reporting;
		}

		_reporting = reporting;
	}

	public int getOriginalReporting() {
		return _originalReporting;
	}

	@Override
	public int getOvertimeInside() {
		return _overtimeInside;
	}

	@Override
	public void setOvertimeInside(int overtimeInside) {
		_overtimeInside = overtimeInside;
	}

	@Override
	public int getOvertimeOutside() {
		return _overtimeOutside;
	}

	@Override
	public void setOvertimeOutside(int overtimeOutside) {
		_overtimeOutside = overtimeOutside;
	}

	@Override
	public int getInteroperatingCount() {
		return _interoperatingCount;
	}

	@Override
	public void setInteroperatingCount(int interoperatingCount) {
		_interoperatingCount = interoperatingCount;
	}

	@Override
	public int getWaitingCount() {
		return _waitingCount;
	}

	@Override
	public void setWaitingCount(int waitingCount) {
		_waitingCount = waitingCount;
	}

	@Override
	public int getOutsideCount() {
		return _outsideCount;
	}

	@Override
	public void setOutsideCount(int outsideCount) {
		_outsideCount = outsideCount;
	}

	@Override
	public int getInsideCount() {
		return _insideCount;
	}

	@Override
	public void setInsideCount(int insideCount) {
		_insideCount = insideCount;
	}

	@Override
	public String getSystem() {
		if (_system == null) {
			return "";
		}
		else {
			return _system;
		}
	}

	@Override
	public void setSystem(String system) {
		_columnBitmask |= SYSTEM_COLUMN_BITMASK;

		if (_originalSystem == null) {
			_originalSystem = _system;
		}

		_system = system;
	}

	public String getOriginalSystem() {
		return GetterUtil.getString(_originalSystem);
	}

	@Override
	public int getViaPostalCount() {
		return _viaPostalCount;
	}

	@Override
	public void setViaPostalCount(int viaPostalCount) {
		_viaPostalCount = viaPostalCount;
	}

	@Override
	public int getNotViaPostalCount() {
		return _notViaPostalCount;
	}

	@Override
	public void setNotViaPostalCount(int notViaPostalCount) {
		_notViaPostalCount = notViaPostalCount;
	}

	@Override
	public int getSaturdayCount() {
		return _saturdayCount;
	}

	@Override
	public void setSaturdayCount(int saturdayCount) {
		_saturdayCount = saturdayCount;
	}

	@Override
	public int getDossierOnline3Count() {
		return _dossierOnline3Count;
	}

	@Override
	public void setDossierOnline3Count(int dossierOnline3Count) {
		_dossierOnline3Count = dossierOnline3Count;
	}

	@Override
	public int getDossierOnline4Count() {
		return _dossierOnline4Count;
	}

	@Override
	public void setDossierOnline4Count(int dossierOnline4Count) {
		_dossierOnline4Count = dossierOnline4Count;
	}

	@Override
	public int getReceiveDossierSatCount() {
		return _receiveDossierSatCount;
	}

	@Override
	public void setReceiveDossierSatCount(int receiveDossierSatCount) {
		_receiveDossierSatCount = receiveDossierSatCount;
	}

	@Override
	public int getReleaseDossierSatCount() {
		return _releaseDossierSatCount;
	}

	@Override
	public void setReleaseDossierSatCount(int releaseDossierSatCount) {
		_releaseDossierSatCount = releaseDossierSatCount;
	}

	@Override
	public int getFromViaPostalCount() {
		return _fromViaPostalCount;
	}

	@Override
	public void setFromViaPostalCount(int fromViaPostalCount) {
		_fromViaPostalCount = fromViaPostalCount;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				OpencpsDossierStatistic.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			OpencpsDossierStatistic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OpencpsDossierStatistic toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OpencpsDossierStatistic)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OpencpsDossierStatisticImpl opencpsDossierStatisticImpl = new OpencpsDossierStatisticImpl();

		opencpsDossierStatisticImpl.setUuid(getUuid());
		opencpsDossierStatisticImpl.setDossierStatisticId(getDossierStatisticId());
		opencpsDossierStatisticImpl.setCompanyId(getCompanyId());
		opencpsDossierStatisticImpl.setGroupId(getGroupId());
		opencpsDossierStatisticImpl.setUserId(getUserId());
		opencpsDossierStatisticImpl.setUserName(getUserName());
		opencpsDossierStatisticImpl.setCreateDate(getCreateDate());
		opencpsDossierStatisticImpl.setModifiedDate(getModifiedDate());
		opencpsDossierStatisticImpl.setMonth(getMonth());
		opencpsDossierStatisticImpl.setYear(getYear());
		opencpsDossierStatisticImpl.setTotalCount(getTotalCount());
		opencpsDossierStatisticImpl.setDeniedCount(getDeniedCount());
		opencpsDossierStatisticImpl.setCancelledCount(getCancelledCount());
		opencpsDossierStatisticImpl.setProcessCount(getProcessCount());
		opencpsDossierStatisticImpl.setRemainingCount(getRemainingCount());
		opencpsDossierStatisticImpl.setReceivedCount(getReceivedCount());
		opencpsDossierStatisticImpl.setOnlineCount(getOnlineCount());
		opencpsDossierStatisticImpl.setOnegateCount(getOnegateCount());
		opencpsDossierStatisticImpl.setReleaseCount(getReleaseCount());
		opencpsDossierStatisticImpl.setBetimesCount(getBetimesCount());
		opencpsDossierStatisticImpl.setOntimeCount(getOntimeCount());
		opencpsDossierStatisticImpl.setOvertimeCount(getOvertimeCount());
		opencpsDossierStatisticImpl.setDoneCount(getDoneCount());
		opencpsDossierStatisticImpl.setReleasingCount(getReleasingCount());
		opencpsDossierStatisticImpl.setUnresolvedCount(getUnresolvedCount());
		opencpsDossierStatisticImpl.setProcessingCount(getProcessingCount());
		opencpsDossierStatisticImpl.setUndueCount(getUndueCount());
		opencpsDossierStatisticImpl.setOverdueCount(getOverdueCount());
		opencpsDossierStatisticImpl.setPausingCount(getPausingCount());
		opencpsDossierStatisticImpl.setOntimePercentage(getOntimePercentage());
		opencpsDossierStatisticImpl.setGovAgencyCode(getGovAgencyCode());
		opencpsDossierStatisticImpl.setGroupAgencyCode(getGroupAgencyCode());
		opencpsDossierStatisticImpl.setGovAgencyName(getGovAgencyName());
		opencpsDossierStatisticImpl.setDomainCode(getDomainCode());
		opencpsDossierStatisticImpl.setDomainName(getDomainName());
		opencpsDossierStatisticImpl.setReporting(getReporting());
		opencpsDossierStatisticImpl.setOvertimeInside(getOvertimeInside());
		opencpsDossierStatisticImpl.setOvertimeOutside(getOvertimeOutside());
		opencpsDossierStatisticImpl.setInteroperatingCount(getInteroperatingCount());
		opencpsDossierStatisticImpl.setWaitingCount(getWaitingCount());
		opencpsDossierStatisticImpl.setOutsideCount(getOutsideCount());
		opencpsDossierStatisticImpl.setInsideCount(getInsideCount());
		opencpsDossierStatisticImpl.setSystem(getSystem());
		opencpsDossierStatisticImpl.setViaPostalCount(getViaPostalCount());
		opencpsDossierStatisticImpl.setNotViaPostalCount(getNotViaPostalCount());
		opencpsDossierStatisticImpl.setSaturdayCount(getSaturdayCount());
		opencpsDossierStatisticImpl.setDossierOnline3Count(getDossierOnline3Count());
		opencpsDossierStatisticImpl.setDossierOnline4Count(getDossierOnline4Count());
		opencpsDossierStatisticImpl.setReceiveDossierSatCount(getReceiveDossierSatCount());
		opencpsDossierStatisticImpl.setReleaseDossierSatCount(getReleaseDossierSatCount());
		opencpsDossierStatisticImpl.setFromViaPostalCount(getFromViaPostalCount());

		opencpsDossierStatisticImpl.resetOriginalValues();

		return opencpsDossierStatisticImpl;
	}

	@Override
	public int compareTo(OpencpsDossierStatistic opencpsDossierStatistic) {
		long primaryKey = opencpsDossierStatistic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OpencpsDossierStatistic)) {
			return false;
		}

		OpencpsDossierStatistic opencpsDossierStatistic = (OpencpsDossierStatistic)obj;

		long primaryKey = opencpsDossierStatistic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		OpencpsDossierStatisticModelImpl opencpsDossierStatisticModelImpl = this;

		opencpsDossierStatisticModelImpl._originalUuid = opencpsDossierStatisticModelImpl._uuid;

		opencpsDossierStatisticModelImpl._originalCompanyId = opencpsDossierStatisticModelImpl._companyId;

		opencpsDossierStatisticModelImpl._setOriginalCompanyId = false;

		opencpsDossierStatisticModelImpl._originalGroupId = opencpsDossierStatisticModelImpl._groupId;

		opencpsDossierStatisticModelImpl._setOriginalGroupId = false;

		opencpsDossierStatisticModelImpl._originalUserId = opencpsDossierStatisticModelImpl._userId;

		opencpsDossierStatisticModelImpl._setOriginalUserId = false;

		opencpsDossierStatisticModelImpl._setModifiedDate = false;

		opencpsDossierStatisticModelImpl._originalMonth = opencpsDossierStatisticModelImpl._month;

		opencpsDossierStatisticModelImpl._setOriginalMonth = false;

		opencpsDossierStatisticModelImpl._originalYear = opencpsDossierStatisticModelImpl._year;

		opencpsDossierStatisticModelImpl._setOriginalYear = false;

		opencpsDossierStatisticModelImpl._originalGovAgencyCode = opencpsDossierStatisticModelImpl._govAgencyCode;

		opencpsDossierStatisticModelImpl._originalGroupAgencyCode = opencpsDossierStatisticModelImpl._groupAgencyCode;

		opencpsDossierStatisticModelImpl._originalDomainCode = opencpsDossierStatisticModelImpl._domainCode;

		opencpsDossierStatisticModelImpl._originalReporting = opencpsDossierStatisticModelImpl._reporting;

		opencpsDossierStatisticModelImpl._setOriginalReporting = false;

		opencpsDossierStatisticModelImpl._originalSystem = opencpsDossierStatisticModelImpl._system;

		opencpsDossierStatisticModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OpencpsDossierStatistic> toCacheModel() {
		OpencpsDossierStatisticCacheModel opencpsDossierStatisticCacheModel = new OpencpsDossierStatisticCacheModel();

		opencpsDossierStatisticCacheModel.uuid = getUuid();

		String uuid = opencpsDossierStatisticCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			opencpsDossierStatisticCacheModel.uuid = null;
		}

		opencpsDossierStatisticCacheModel.dossierStatisticId = getDossierStatisticId();

		opencpsDossierStatisticCacheModel.companyId = getCompanyId();

		opencpsDossierStatisticCacheModel.groupId = getGroupId();

		opencpsDossierStatisticCacheModel.userId = getUserId();

		opencpsDossierStatisticCacheModel.userName = getUserName();

		String userName = opencpsDossierStatisticCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			opencpsDossierStatisticCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			opencpsDossierStatisticCacheModel.createDate = createDate.getTime();
		}
		else {
			opencpsDossierStatisticCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			opencpsDossierStatisticCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			opencpsDossierStatisticCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		opencpsDossierStatisticCacheModel.month = getMonth();

		opencpsDossierStatisticCacheModel.year = getYear();

		opencpsDossierStatisticCacheModel.totalCount = getTotalCount();

		opencpsDossierStatisticCacheModel.deniedCount = getDeniedCount();

		opencpsDossierStatisticCacheModel.cancelledCount = getCancelledCount();

		opencpsDossierStatisticCacheModel.processCount = getProcessCount();

		opencpsDossierStatisticCacheModel.remainingCount = getRemainingCount();

		opencpsDossierStatisticCacheModel.receivedCount = getReceivedCount();

		opencpsDossierStatisticCacheModel.onlineCount = getOnlineCount();

		opencpsDossierStatisticCacheModel.onegateCount = getOnegateCount();

		opencpsDossierStatisticCacheModel.releaseCount = getReleaseCount();

		opencpsDossierStatisticCacheModel.betimesCount = getBetimesCount();

		opencpsDossierStatisticCacheModel.ontimeCount = getOntimeCount();

		opencpsDossierStatisticCacheModel.overtimeCount = getOvertimeCount();

		opencpsDossierStatisticCacheModel.doneCount = getDoneCount();

		opencpsDossierStatisticCacheModel.releasingCount = getReleasingCount();

		opencpsDossierStatisticCacheModel.unresolvedCount = getUnresolvedCount();

		opencpsDossierStatisticCacheModel.processingCount = getProcessingCount();

		opencpsDossierStatisticCacheModel.undueCount = getUndueCount();

		opencpsDossierStatisticCacheModel.overdueCount = getOverdueCount();

		opencpsDossierStatisticCacheModel.pausingCount = getPausingCount();

		opencpsDossierStatisticCacheModel.ontimePercentage = getOntimePercentage();

		opencpsDossierStatisticCacheModel.govAgencyCode = getGovAgencyCode();

		String govAgencyCode = opencpsDossierStatisticCacheModel.govAgencyCode;

		if ((govAgencyCode != null) && (govAgencyCode.length() == 0)) {
			opencpsDossierStatisticCacheModel.govAgencyCode = null;
		}

		opencpsDossierStatisticCacheModel.groupAgencyCode = getGroupAgencyCode();

		String groupAgencyCode = opencpsDossierStatisticCacheModel.groupAgencyCode;

		if ((groupAgencyCode != null) && (groupAgencyCode.length() == 0)) {
			opencpsDossierStatisticCacheModel.groupAgencyCode = null;
		}

		opencpsDossierStatisticCacheModel.govAgencyName = getGovAgencyName();

		String govAgencyName = opencpsDossierStatisticCacheModel.govAgencyName;

		if ((govAgencyName != null) && (govAgencyName.length() == 0)) {
			opencpsDossierStatisticCacheModel.govAgencyName = null;
		}

		opencpsDossierStatisticCacheModel.domainCode = getDomainCode();

		String domainCode = opencpsDossierStatisticCacheModel.domainCode;

		if ((domainCode != null) && (domainCode.length() == 0)) {
			opencpsDossierStatisticCacheModel.domainCode = null;
		}

		opencpsDossierStatisticCacheModel.domainName = getDomainName();

		String domainName = opencpsDossierStatisticCacheModel.domainName;

		if ((domainName != null) && (domainName.length() == 0)) {
			opencpsDossierStatisticCacheModel.domainName = null;
		}

		opencpsDossierStatisticCacheModel.reporting = getReporting();

		opencpsDossierStatisticCacheModel.overtimeInside = getOvertimeInside();

		opencpsDossierStatisticCacheModel.overtimeOutside = getOvertimeOutside();

		opencpsDossierStatisticCacheModel.interoperatingCount = getInteroperatingCount();

		opencpsDossierStatisticCacheModel.waitingCount = getWaitingCount();

		opencpsDossierStatisticCacheModel.outsideCount = getOutsideCount();

		opencpsDossierStatisticCacheModel.insideCount = getInsideCount();

		opencpsDossierStatisticCacheModel.system = getSystem();

		String system = opencpsDossierStatisticCacheModel.system;

		if ((system != null) && (system.length() == 0)) {
			opencpsDossierStatisticCacheModel.system = null;
		}

		opencpsDossierStatisticCacheModel.viaPostalCount = getViaPostalCount();

		opencpsDossierStatisticCacheModel.notViaPostalCount = getNotViaPostalCount();

		opencpsDossierStatisticCacheModel.saturdayCount = getSaturdayCount();

		opencpsDossierStatisticCacheModel.dossierOnline3Count = getDossierOnline3Count();

		opencpsDossierStatisticCacheModel.dossierOnline4Count = getDossierOnline4Count();

		opencpsDossierStatisticCacheModel.receiveDossierSatCount = getReceiveDossierSatCount();

		opencpsDossierStatisticCacheModel.releaseDossierSatCount = getReleaseDossierSatCount();

		opencpsDossierStatisticCacheModel.fromViaPostalCount = getFromViaPostalCount();

		return opencpsDossierStatisticCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(103);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dossierStatisticId=");
		sb.append(getDossierStatisticId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", totalCount=");
		sb.append(getTotalCount());
		sb.append(", deniedCount=");
		sb.append(getDeniedCount());
		sb.append(", cancelledCount=");
		sb.append(getCancelledCount());
		sb.append(", processCount=");
		sb.append(getProcessCount());
		sb.append(", remainingCount=");
		sb.append(getRemainingCount());
		sb.append(", receivedCount=");
		sb.append(getReceivedCount());
		sb.append(", onlineCount=");
		sb.append(getOnlineCount());
		sb.append(", onegateCount=");
		sb.append(getOnegateCount());
		sb.append(", releaseCount=");
		sb.append(getReleaseCount());
		sb.append(", betimesCount=");
		sb.append(getBetimesCount());
		sb.append(", ontimeCount=");
		sb.append(getOntimeCount());
		sb.append(", overtimeCount=");
		sb.append(getOvertimeCount());
		sb.append(", doneCount=");
		sb.append(getDoneCount());
		sb.append(", releasingCount=");
		sb.append(getReleasingCount());
		sb.append(", unresolvedCount=");
		sb.append(getUnresolvedCount());
		sb.append(", processingCount=");
		sb.append(getProcessingCount());
		sb.append(", undueCount=");
		sb.append(getUndueCount());
		sb.append(", overdueCount=");
		sb.append(getOverdueCount());
		sb.append(", pausingCount=");
		sb.append(getPausingCount());
		sb.append(", ontimePercentage=");
		sb.append(getOntimePercentage());
		sb.append(", govAgencyCode=");
		sb.append(getGovAgencyCode());
		sb.append(", groupAgencyCode=");
		sb.append(getGroupAgencyCode());
		sb.append(", govAgencyName=");
		sb.append(getGovAgencyName());
		sb.append(", domainCode=");
		sb.append(getDomainCode());
		sb.append(", domainName=");
		sb.append(getDomainName());
		sb.append(", reporting=");
		sb.append(getReporting());
		sb.append(", overtimeInside=");
		sb.append(getOvertimeInside());
		sb.append(", overtimeOutside=");
		sb.append(getOvertimeOutside());
		sb.append(", interoperatingCount=");
		sb.append(getInteroperatingCount());
		sb.append(", waitingCount=");
		sb.append(getWaitingCount());
		sb.append(", outsideCount=");
		sb.append(getOutsideCount());
		sb.append(", insideCount=");
		sb.append(getInsideCount());
		sb.append(", system=");
		sb.append(getSystem());
		sb.append(", viaPostalCount=");
		sb.append(getViaPostalCount());
		sb.append(", notViaPostalCount=");
		sb.append(getNotViaPostalCount());
		sb.append(", saturdayCount=");
		sb.append(getSaturdayCount());
		sb.append(", dossierOnline3Count=");
		sb.append(getDossierOnline3Count());
		sb.append(", dossierOnline4Count=");
		sb.append(getDossierOnline4Count());
		sb.append(", receiveDossierSatCount=");
		sb.append(getReceiveDossierSatCount());
		sb.append(", releaseDossierSatCount=");
		sb.append(getReleaseDossierSatCount());
		sb.append(", fromViaPostalCount=");
		sb.append(getFromViaPostalCount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(157);

		sb.append("<model><model-name>");
		sb.append("org.opencps.statistic.model.OpencpsDossierStatistic");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierStatisticId</column-name><column-value><![CDATA[");
		sb.append(getDossierStatisticId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCount</column-name><column-value><![CDATA[");
		sb.append(getTotalCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deniedCount</column-name><column-value><![CDATA[");
		sb.append(getDeniedCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelledCount</column-name><column-value><![CDATA[");
		sb.append(getCancelledCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processCount</column-name><column-value><![CDATA[");
		sb.append(getProcessCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remainingCount</column-name><column-value><![CDATA[");
		sb.append(getRemainingCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivedCount</column-name><column-value><![CDATA[");
		sb.append(getReceivedCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onlineCount</column-name><column-value><![CDATA[");
		sb.append(getOnlineCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onegateCount</column-name><column-value><![CDATA[");
		sb.append(getOnegateCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>releaseCount</column-name><column-value><![CDATA[");
		sb.append(getReleaseCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>betimesCount</column-name><column-value><![CDATA[");
		sb.append(getBetimesCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ontimeCount</column-name><column-value><![CDATA[");
		sb.append(getOntimeCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overtimeCount</column-name><column-value><![CDATA[");
		sb.append(getOvertimeCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doneCount</column-name><column-value><![CDATA[");
		sb.append(getDoneCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>releasingCount</column-name><column-value><![CDATA[");
		sb.append(getReleasingCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unresolvedCount</column-name><column-value><![CDATA[");
		sb.append(getUnresolvedCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processingCount</column-name><column-value><![CDATA[");
		sb.append(getProcessingCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>undueCount</column-name><column-value><![CDATA[");
		sb.append(getUndueCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overdueCount</column-name><column-value><![CDATA[");
		sb.append(getOverdueCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pausingCount</column-name><column-value><![CDATA[");
		sb.append(getPausingCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ontimePercentage</column-name><column-value><![CDATA[");
		sb.append(getOntimePercentage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>govAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getGovAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getGroupAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>govAgencyName</column-name><column-value><![CDATA[");
		sb.append(getGovAgencyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>domainCode</column-name><column-value><![CDATA[");
		sb.append(getDomainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>domainName</column-name><column-value><![CDATA[");
		sb.append(getDomainName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reporting</column-name><column-value><![CDATA[");
		sb.append(getReporting());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overtimeInside</column-name><column-value><![CDATA[");
		sb.append(getOvertimeInside());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overtimeOutside</column-name><column-value><![CDATA[");
		sb.append(getOvertimeOutside());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interoperatingCount</column-name><column-value><![CDATA[");
		sb.append(getInteroperatingCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>waitingCount</column-name><column-value><![CDATA[");
		sb.append(getWaitingCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outsideCount</column-name><column-value><![CDATA[");
		sb.append(getOutsideCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insideCount</column-name><column-value><![CDATA[");
		sb.append(getInsideCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>system</column-name><column-value><![CDATA[");
		sb.append(getSystem());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viaPostalCount</column-name><column-value><![CDATA[");
		sb.append(getViaPostalCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notViaPostalCount</column-name><column-value><![CDATA[");
		sb.append(getNotViaPostalCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>saturdayCount</column-name><column-value><![CDATA[");
		sb.append(getSaturdayCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierOnline3Count</column-name><column-value><![CDATA[");
		sb.append(getDossierOnline3Count());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierOnline4Count</column-name><column-value><![CDATA[");
		sb.append(getDossierOnline4Count());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiveDossierSatCount</column-name><column-value><![CDATA[");
		sb.append(getReceiveDossierSatCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>releaseDossierSatCount</column-name><column-value><![CDATA[");
		sb.append(getReleaseDossierSatCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromViaPostalCount</column-name><column-value><![CDATA[");
		sb.append(getFromViaPostalCount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = OpencpsDossierStatistic.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			OpencpsDossierStatistic.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dossierStatisticId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _month;
	private int _originalMonth;
	private boolean _setOriginalMonth;
	private int _year;
	private int _originalYear;
	private boolean _setOriginalYear;
	private int _totalCount;
	private int _deniedCount;
	private int _cancelledCount;
	private int _processCount;
	private int _remainingCount;
	private int _receivedCount;
	private int _onlineCount;
	private int _onegateCount;
	private int _releaseCount;
	private int _betimesCount;
	private int _ontimeCount;
	private int _overtimeCount;
	private int _doneCount;
	private int _releasingCount;
	private int _unresolvedCount;
	private int _processingCount;
	private int _undueCount;
	private int _overdueCount;
	private int _pausingCount;
	private int _ontimePercentage;
	private String _govAgencyCode;
	private String _originalGovAgencyCode;
	private String _groupAgencyCode;
	private String _originalGroupAgencyCode;
	private String _govAgencyName;
	private String _domainCode;
	private String _originalDomainCode;
	private String _domainName;
	private int _reporting;
	private int _originalReporting;
	private boolean _setOriginalReporting;
	private int _overtimeInside;
	private int _overtimeOutside;
	private int _interoperatingCount;
	private int _waitingCount;
	private int _outsideCount;
	private int _insideCount;
	private String _system;
	private String _originalSystem;
	private int _viaPostalCount;
	private int _notViaPostalCount;
	private int _saturdayCount;
	private int _dossierOnline3Count;
	private int _dossierOnline4Count;
	private int _receiveDossierSatCount;
	private int _releaseDossierSatCount;
	private int _fromViaPostalCount;
	private long _columnBitmask;
	private OpencpsDossierStatistic _escapedModel;
}