/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.communication.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.communication.model.Notificationtemplate;
import org.opencps.communication.model.NotificationtemplateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Notificationtemplate service. Represents a row in the &quot;opencps_notificationtemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NotificationtemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificationtemplateImpl}.
 * </p>
 *
 * @author khoavd
 * @see NotificationtemplateImpl
 * @see Notificationtemplate
 * @see NotificationtemplateModel
 * @generated
 */
@ProviderType
public class NotificationtemplateModelImpl extends BaseModelImpl<Notificationtemplate>
	implements NotificationtemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notificationtemplate model instance should use the {@link Notificationtemplate} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_notificationtemplate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notificationTemplateId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "notificationType", Types.VARCHAR },
			{ "emailSubject", Types.VARCHAR },
			{ "emailBody", Types.CLOB },
			{ "textMessage", Types.VARCHAR },
			{ "notifyMessage", Types.CLOB },
			{ "sendSMS", Types.BOOLEAN },
			{ "sendEmail", Types.BOOLEAN },
			{ "sendNotification", Types.BOOLEAN },
			{ "expireDuration", Types.INTEGER },
			{ "userUrlPattern", Types.VARCHAR },
			{ "guestUrlPattern", Types.VARCHAR },
			{ "interval_", Types.VARCHAR },
			{ "grouping", Types.BOOLEAN },
			{ "priority", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("notificationTemplateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("notificationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailSubject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailBody", Types.CLOB);
		TABLE_COLUMNS_MAP.put("textMessage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notifyMessage", Types.CLOB);
		TABLE_COLUMNS_MAP.put("sendSMS", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sendEmail", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sendNotification", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("expireDuration", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userUrlPattern", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("guestUrlPattern", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("interval_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("grouping", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_notificationtemplate (notificationTemplateId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(255) null,createDate DATE null,modifiedDate DATE null,notificationType VARCHAR(255) null,emailSubject TEXT null,emailBody TEXT null,textMessage TEXT null,notifyMessage TEXT null,sendSMS BOOLEAN,sendEmail BOOLEAN,sendNotification BOOLEAN,expireDuration INTEGER,userUrlPattern VARCHAR(1024) null,guestUrlPattern VARCHAR(1024) null,interval_ VARCHAR(255) null,grouping BOOLEAN,priority INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_notificationtemplate";
	public static final String ORDER_BY_JPQL = " ORDER BY notificationtemplate.notificationType ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_notificationtemplate.notificationType ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(backend.communication.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.communication.model.Notificationtemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(backend.communication.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.communication.model.Notificationtemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(backend.communication.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.communication.model.Notificationtemplate"),
			true);
	public static final long EMAILSUBJECT_COLUMN_BITMASK = 1L;
	public static final long EXPIREDURATION_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long INTERVAL_COLUMN_BITMASK = 8L;
	public static final long NOTIFICATIONTYPE_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(backend.communication.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.communication.model.Notificationtemplate"));

	public NotificationtemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificationTemplateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificationTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificationTemplateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Notificationtemplate.class;
	}

	@Override
	public String getModelClassName() {
		return Notificationtemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notificationTemplateId", getNotificationTemplateId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("notificationType", getNotificationType());
		attributes.put("emailSubject", getEmailSubject());
		attributes.put("emailBody", getEmailBody());
		attributes.put("textMessage", getTextMessage());
		attributes.put("notifyMessage", getNotifyMessage());
		attributes.put("sendSMS", isSendSMS());
		attributes.put("sendEmail", isSendEmail());
		attributes.put("sendNotification", isSendNotification());
		attributes.put("expireDuration", getExpireDuration());
		attributes.put("userUrlPattern", getUserUrlPattern());
		attributes.put("guestUrlPattern", getGuestUrlPattern());
		attributes.put("interval", getInterval());
		attributes.put("grouping", isGrouping());
		attributes.put("priority", getPriority());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notificationTemplateId = (Long)attributes.get(
				"notificationTemplateId");

		if (notificationTemplateId != null) {
			setNotificationTemplateId(notificationTemplateId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String notificationType = (String)attributes.get("notificationType");

		if (notificationType != null) {
			setNotificationType(notificationType);
		}

		String emailSubject = (String)attributes.get("emailSubject");

		if (emailSubject != null) {
			setEmailSubject(emailSubject);
		}

		String emailBody = (String)attributes.get("emailBody");

		if (emailBody != null) {
			setEmailBody(emailBody);
		}

		String textMessage = (String)attributes.get("textMessage");

		if (textMessage != null) {
			setTextMessage(textMessage);
		}

		String notifyMessage = (String)attributes.get("notifyMessage");

		if (notifyMessage != null) {
			setNotifyMessage(notifyMessage);
		}

		Boolean sendSMS = (Boolean)attributes.get("sendSMS");

		if (sendSMS != null) {
			setSendSMS(sendSMS);
		}

		Boolean sendEmail = (Boolean)attributes.get("sendEmail");

		if (sendEmail != null) {
			setSendEmail(sendEmail);
		}

		Boolean sendNotification = (Boolean)attributes.get("sendNotification");

		if (sendNotification != null) {
			setSendNotification(sendNotification);
		}

		Integer expireDuration = (Integer)attributes.get("expireDuration");

		if (expireDuration != null) {
			setExpireDuration(expireDuration);
		}

		String userUrlPattern = (String)attributes.get("userUrlPattern");

		if (userUrlPattern != null) {
			setUserUrlPattern(userUrlPattern);
		}

		String guestUrlPattern = (String)attributes.get("guestUrlPattern");

		if (guestUrlPattern != null) {
			setGuestUrlPattern(guestUrlPattern);
		}

		String interval = (String)attributes.get("interval");

		if (interval != null) {
			setInterval(interval);
		}

		Boolean grouping = (Boolean)attributes.get("grouping");

		if (grouping != null) {
			setGrouping(grouping);
		}

		Integer priority = (Integer)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}
	}

	@Override
	public long getNotificationTemplateId() {
		return _notificationTemplateId;
	}

	@Override
	public void setNotificationTemplateId(long notificationTemplateId) {
		_notificationTemplateId = notificationTemplateId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getNotificationType() {
		if (_notificationType == null) {
			return "";
		}
		else {
			return _notificationType;
		}
	}

	@Override
	public void setNotificationType(String notificationType) {
		_columnBitmask = -1L;

		if (_originalNotificationType == null) {
			_originalNotificationType = _notificationType;
		}

		_notificationType = notificationType;
	}

	public String getOriginalNotificationType() {
		return GetterUtil.getString(_originalNotificationType);
	}

	@Override
	public String getEmailSubject() {
		if (_emailSubject == null) {
			return "";
		}
		else {
			return _emailSubject;
		}
	}

	@Override
	public void setEmailSubject(String emailSubject) {
		_columnBitmask |= EMAILSUBJECT_COLUMN_BITMASK;

		if (_originalEmailSubject == null) {
			_originalEmailSubject = _emailSubject;
		}

		_emailSubject = emailSubject;
	}

	public String getOriginalEmailSubject() {
		return GetterUtil.getString(_originalEmailSubject);
	}

	@Override
	public String getEmailBody() {
		if (_emailBody == null) {
			return "";
		}
		else {
			return _emailBody;
		}
	}

	@Override
	public void setEmailBody(String emailBody) {
		_emailBody = emailBody;
	}

	@Override
	public String getTextMessage() {
		if (_textMessage == null) {
			return "";
		}
		else {
			return _textMessage;
		}
	}

	@Override
	public void setTextMessage(String textMessage) {
		_textMessage = textMessage;
	}

	@Override
	public String getNotifyMessage() {
		if (_notifyMessage == null) {
			return "";
		}
		else {
			return _notifyMessage;
		}
	}

	@Override
	public void setNotifyMessage(String notifyMessage) {
		_notifyMessage = notifyMessage;
	}

	@Override
	public boolean getSendSMS() {
		return _sendSMS;
	}

	@Override
	public boolean isSendSMS() {
		return _sendSMS;
	}

	@Override
	public void setSendSMS(boolean sendSMS) {
		_sendSMS = sendSMS;
	}

	@Override
	public boolean getSendEmail() {
		return _sendEmail;
	}

	@Override
	public boolean isSendEmail() {
		return _sendEmail;
	}

	@Override
	public void setSendEmail(boolean sendEmail) {
		_sendEmail = sendEmail;
	}

	@Override
	public boolean getSendNotification() {
		return _sendNotification;
	}

	@Override
	public boolean isSendNotification() {
		return _sendNotification;
	}

	@Override
	public void setSendNotification(boolean sendNotification) {
		_sendNotification = sendNotification;
	}

	@Override
	public int getExpireDuration() {
		return _expireDuration;
	}

	@Override
	public void setExpireDuration(int expireDuration) {
		_columnBitmask |= EXPIREDURATION_COLUMN_BITMASK;

		if (!_setOriginalExpireDuration) {
			_setOriginalExpireDuration = true;

			_originalExpireDuration = _expireDuration;
		}

		_expireDuration = expireDuration;
	}

	public int getOriginalExpireDuration() {
		return _originalExpireDuration;
	}

	@Override
	public String getUserUrlPattern() {
		if (_userUrlPattern == null) {
			return "";
		}
		else {
			return _userUrlPattern;
		}
	}

	@Override
	public void setUserUrlPattern(String userUrlPattern) {
		_userUrlPattern = userUrlPattern;
	}

	@Override
	public String getGuestUrlPattern() {
		if (_guestUrlPattern == null) {
			return "";
		}
		else {
			return _guestUrlPattern;
		}
	}

	@Override
	public void setGuestUrlPattern(String guestUrlPattern) {
		_guestUrlPattern = guestUrlPattern;
	}

	@Override
	public String getInterval() {
		if (_interval == null) {
			return "";
		}
		else {
			return _interval;
		}
	}

	@Override
	public void setInterval(String interval) {
		_columnBitmask |= INTERVAL_COLUMN_BITMASK;

		if (_originalInterval == null) {
			_originalInterval = _interval;
		}

		_interval = interval;
	}

	public String getOriginalInterval() {
		return GetterUtil.getString(_originalInterval);
	}

	@Override
	public boolean getGrouping() {
		return _grouping;
	}

	@Override
	public boolean isGrouping() {
		return _grouping;
	}

	@Override
	public void setGrouping(boolean grouping) {
		_grouping = grouping;
	}

	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		_priority = priority;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Notificationtemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Notificationtemplate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Notificationtemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificationtemplateImpl notificationtemplateImpl = new NotificationtemplateImpl();

		notificationtemplateImpl.setNotificationTemplateId(getNotificationTemplateId());
		notificationtemplateImpl.setGroupId(getGroupId());
		notificationtemplateImpl.setCompanyId(getCompanyId());
		notificationtemplateImpl.setUserId(getUserId());
		notificationtemplateImpl.setUserName(getUserName());
		notificationtemplateImpl.setCreateDate(getCreateDate());
		notificationtemplateImpl.setModifiedDate(getModifiedDate());
		notificationtemplateImpl.setNotificationType(getNotificationType());
		notificationtemplateImpl.setEmailSubject(getEmailSubject());
		notificationtemplateImpl.setEmailBody(getEmailBody());
		notificationtemplateImpl.setTextMessage(getTextMessage());
		notificationtemplateImpl.setNotifyMessage(getNotifyMessage());
		notificationtemplateImpl.setSendSMS(isSendSMS());
		notificationtemplateImpl.setSendEmail(isSendEmail());
		notificationtemplateImpl.setSendNotification(isSendNotification());
		notificationtemplateImpl.setExpireDuration(getExpireDuration());
		notificationtemplateImpl.setUserUrlPattern(getUserUrlPattern());
		notificationtemplateImpl.setGuestUrlPattern(getGuestUrlPattern());
		notificationtemplateImpl.setInterval(getInterval());
		notificationtemplateImpl.setGrouping(isGrouping());
		notificationtemplateImpl.setPriority(getPriority());

		notificationtemplateImpl.resetOriginalValues();

		return notificationtemplateImpl;
	}

	@Override
	public int compareTo(Notificationtemplate notificationtemplate) {
		int value = 0;

		value = getNotificationType()
					.compareTo(notificationtemplate.getNotificationType());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Notificationtemplate)) {
			return false;
		}

		Notificationtemplate notificationtemplate = (Notificationtemplate)obj;

		long primaryKey = notificationtemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		NotificationtemplateModelImpl notificationtemplateModelImpl = this;

		notificationtemplateModelImpl._originalGroupId = notificationtemplateModelImpl._groupId;

		notificationtemplateModelImpl._setOriginalGroupId = false;

		notificationtemplateModelImpl._setModifiedDate = false;

		notificationtemplateModelImpl._originalNotificationType = notificationtemplateModelImpl._notificationType;

		notificationtemplateModelImpl._originalEmailSubject = notificationtemplateModelImpl._emailSubject;

		notificationtemplateModelImpl._originalExpireDuration = notificationtemplateModelImpl._expireDuration;

		notificationtemplateModelImpl._setOriginalExpireDuration = false;

		notificationtemplateModelImpl._originalInterval = notificationtemplateModelImpl._interval;

		notificationtemplateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Notificationtemplate> toCacheModel() {
		NotificationtemplateCacheModel notificationtemplateCacheModel = new NotificationtemplateCacheModel();

		notificationtemplateCacheModel.notificationTemplateId = getNotificationTemplateId();

		notificationtemplateCacheModel.groupId = getGroupId();

		notificationtemplateCacheModel.companyId = getCompanyId();

		notificationtemplateCacheModel.userId = getUserId();

		notificationtemplateCacheModel.userName = getUserName();

		String userName = notificationtemplateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			notificationtemplateCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			notificationtemplateCacheModel.createDate = createDate.getTime();
		}
		else {
			notificationtemplateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notificationtemplateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notificationtemplateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notificationtemplateCacheModel.notificationType = getNotificationType();

		String notificationType = notificationtemplateCacheModel.notificationType;

		if ((notificationType != null) && (notificationType.length() == 0)) {
			notificationtemplateCacheModel.notificationType = null;
		}

		notificationtemplateCacheModel.emailSubject = getEmailSubject();

		String emailSubject = notificationtemplateCacheModel.emailSubject;

		if ((emailSubject != null) && (emailSubject.length() == 0)) {
			notificationtemplateCacheModel.emailSubject = null;
		}

		notificationtemplateCacheModel.emailBody = getEmailBody();

		String emailBody = notificationtemplateCacheModel.emailBody;

		if ((emailBody != null) && (emailBody.length() == 0)) {
			notificationtemplateCacheModel.emailBody = null;
		}

		notificationtemplateCacheModel.textMessage = getTextMessage();

		String textMessage = notificationtemplateCacheModel.textMessage;

		if ((textMessage != null) && (textMessage.length() == 0)) {
			notificationtemplateCacheModel.textMessage = null;
		}

		notificationtemplateCacheModel.notifyMessage = getNotifyMessage();

		String notifyMessage = notificationtemplateCacheModel.notifyMessage;

		if ((notifyMessage != null) && (notifyMessage.length() == 0)) {
			notificationtemplateCacheModel.notifyMessage = null;
		}

		notificationtemplateCacheModel.sendSMS = isSendSMS();

		notificationtemplateCacheModel.sendEmail = isSendEmail();

		notificationtemplateCacheModel.sendNotification = isSendNotification();

		notificationtemplateCacheModel.expireDuration = getExpireDuration();

		notificationtemplateCacheModel.userUrlPattern = getUserUrlPattern();

		String userUrlPattern = notificationtemplateCacheModel.userUrlPattern;

		if ((userUrlPattern != null) && (userUrlPattern.length() == 0)) {
			notificationtemplateCacheModel.userUrlPattern = null;
		}

		notificationtemplateCacheModel.guestUrlPattern = getGuestUrlPattern();

		String guestUrlPattern = notificationtemplateCacheModel.guestUrlPattern;

		if ((guestUrlPattern != null) && (guestUrlPattern.length() == 0)) {
			notificationtemplateCacheModel.guestUrlPattern = null;
		}

		notificationtemplateCacheModel.interval = getInterval();

		String interval = notificationtemplateCacheModel.interval;

		if ((interval != null) && (interval.length() == 0)) {
			notificationtemplateCacheModel.interval = null;
		}

		notificationtemplateCacheModel.grouping = isGrouping();

		notificationtemplateCacheModel.priority = getPriority();

		return notificationtemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{notificationTemplateId=");
		sb.append(getNotificationTemplateId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", notificationType=");
		sb.append(getNotificationType());
		sb.append(", emailSubject=");
		sb.append(getEmailSubject());
		sb.append(", emailBody=");
		sb.append(getEmailBody());
		sb.append(", textMessage=");
		sb.append(getTextMessage());
		sb.append(", notifyMessage=");
		sb.append(getNotifyMessage());
		sb.append(", sendSMS=");
		sb.append(isSendSMS());
		sb.append(", sendEmail=");
		sb.append(isSendEmail());
		sb.append(", sendNotification=");
		sb.append(isSendNotification());
		sb.append(", expireDuration=");
		sb.append(getExpireDuration());
		sb.append(", userUrlPattern=");
		sb.append(getUserUrlPattern());
		sb.append(", guestUrlPattern=");
		sb.append(getGuestUrlPattern());
		sb.append(", interval=");
		sb.append(getInterval());
		sb.append(", grouping=");
		sb.append(isGrouping());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("org.opencps.communication.model.Notificationtemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notificationTemplateId</column-name><column-value><![CDATA[");
		sb.append(getNotificationTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationType</column-name><column-value><![CDATA[");
		sb.append(getNotificationType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailSubject</column-name><column-value><![CDATA[");
		sb.append(getEmailSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailBody</column-name><column-value><![CDATA[");
		sb.append(getEmailBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>textMessage</column-name><column-value><![CDATA[");
		sb.append(getTextMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notifyMessage</column-name><column-value><![CDATA[");
		sb.append(getNotifyMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendSMS</column-name><column-value><![CDATA[");
		sb.append(isSendSMS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendEmail</column-name><column-value><![CDATA[");
		sb.append(isSendEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendNotification</column-name><column-value><![CDATA[");
		sb.append(isSendNotification());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expireDuration</column-name><column-value><![CDATA[");
		sb.append(getExpireDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userUrlPattern</column-name><column-value><![CDATA[");
		sb.append(getUserUrlPattern());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>guestUrlPattern</column-name><column-value><![CDATA[");
		sb.append(getGuestUrlPattern());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interval</column-name><column-value><![CDATA[");
		sb.append(getInterval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grouping</column-name><column-value><![CDATA[");
		sb.append(isGrouping());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Notificationtemplate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Notificationtemplate.class, ModelWrapper.class
		};
	private long _notificationTemplateId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _notificationType;
	private String _originalNotificationType;
	private String _emailSubject;
	private String _originalEmailSubject;
	private String _emailBody;
	private String _textMessage;
	private String _notifyMessage;
	private boolean _sendSMS;
	private boolean _sendEmail;
	private boolean _sendNotification;
	private int _expireDuration;
	private int _originalExpireDuration;
	private boolean _setOriginalExpireDuration;
	private String _userUrlPattern;
	private String _guestUrlPattern;
	private String _interval;
	private String _originalInterval;
	private boolean _grouping;
	private int _priority;
	private long _columnBitmask;
	private Notificationtemplate _escapedModel;
}