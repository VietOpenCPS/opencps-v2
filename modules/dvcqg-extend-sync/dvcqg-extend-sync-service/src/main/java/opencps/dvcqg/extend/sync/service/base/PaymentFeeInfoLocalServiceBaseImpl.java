/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package opencps.dvcqg.extend.sync.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import opencps.dvcqg.extend.sync.model.PaymentFeeInfo;
import opencps.dvcqg.extend.sync.service.PaymentFeeInfoLocalService;
import opencps.dvcqg.extend.sync.service.persistence.ApplicableInfoPersistence;
import opencps.dvcqg.extend.sync.service.persistence.PaymentFeeInfoPersistence;
import opencps.dvcqg.extend.sync.service.persistence.ServiceConfigMappingPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the payment fee info local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link opencps.dvcqg.extend.sync.service.impl.PaymentFeeInfoLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see opencps.dvcqg.extend.sync.service.impl.PaymentFeeInfoLocalServiceImpl
 * @see opencps.dvcqg.extend.sync.service.PaymentFeeInfoLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class PaymentFeeInfoLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements PaymentFeeInfoLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link opencps.dvcqg.extend.sync.service.PaymentFeeInfoLocalServiceUtil} to access the payment fee info local service.
	 */

	/**
	 * Adds the payment fee info to the database. Also notifies the appropriate model listeners.
	 *
	 * @param paymentFeeInfo the payment fee info
	 * @return the payment fee info that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public PaymentFeeInfo addPaymentFeeInfo(PaymentFeeInfo paymentFeeInfo) {
		paymentFeeInfo.setNew(true);

		return paymentFeeInfoPersistence.update(paymentFeeInfo);
	}

	/**
	 * Creates a new payment fee info with the primary key. Does not add the payment fee info to the database.
	 *
	 * @param paymentFeeInfoId the primary key for the new payment fee info
	 * @return the new payment fee info
	 */
	@Override
	@Transactional(enabled = false)
	public PaymentFeeInfo createPaymentFeeInfo(long paymentFeeInfoId) {
		return paymentFeeInfoPersistence.create(paymentFeeInfoId);
	}

	/**
	 * Deletes the payment fee info with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param paymentFeeInfoId the primary key of the payment fee info
	 * @return the payment fee info that was removed
	 * @throws PortalException if a payment fee info with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public PaymentFeeInfo deletePaymentFeeInfo(long paymentFeeInfoId)
		throws PortalException {
		return paymentFeeInfoPersistence.remove(paymentFeeInfoId);
	}

	/**
	 * Deletes the payment fee info from the database. Also notifies the appropriate model listeners.
	 *
	 * @param paymentFeeInfo the payment fee info
	 * @return the payment fee info that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public PaymentFeeInfo deletePaymentFeeInfo(PaymentFeeInfo paymentFeeInfo) {
		return paymentFeeInfoPersistence.remove(paymentFeeInfo);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(PaymentFeeInfo.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return paymentFeeInfoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link opencps.dvcqg.extend.sync.model.impl.PaymentFeeInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return paymentFeeInfoPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link opencps.dvcqg.extend.sync.model.impl.PaymentFeeInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return paymentFeeInfoPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return paymentFeeInfoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return paymentFeeInfoPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public PaymentFeeInfo fetchPaymentFeeInfo(long paymentFeeInfoId) {
		return paymentFeeInfoPersistence.fetchByPrimaryKey(paymentFeeInfoId);
	}

	/**
	 * Returns the payment fee info matching the UUID and group.
	 *
	 * @param uuid the payment fee info's UUID
	 * @param groupId the primary key of the group
	 * @return the matching payment fee info, or <code>null</code> if a matching payment fee info could not be found
	 */
	@Override
	public PaymentFeeInfo fetchPaymentFeeInfoByUuidAndGroupId(String uuid,
		long groupId) {
		return paymentFeeInfoPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the payment fee info with the primary key.
	 *
	 * @param paymentFeeInfoId the primary key of the payment fee info
	 * @return the payment fee info
	 * @throws PortalException if a payment fee info with the primary key could not be found
	 */
	@Override
	public PaymentFeeInfo getPaymentFeeInfo(long paymentFeeInfoId)
		throws PortalException {
		return paymentFeeInfoPersistence.findByPrimaryKey(paymentFeeInfoId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(paymentFeeInfoLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(PaymentFeeInfo.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("paymentFeeInfoId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(paymentFeeInfoLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(PaymentFeeInfo.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"paymentFeeInfoId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(paymentFeeInfoLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(PaymentFeeInfo.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("paymentFeeInfoId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<PaymentFeeInfo>() {
				@Override
				public void performAction(PaymentFeeInfo paymentFeeInfo)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						paymentFeeInfo);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(PaymentFeeInfo.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return paymentFeeInfoLocalService.deletePaymentFeeInfo((PaymentFeeInfo)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return paymentFeeInfoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the payment fee infos matching the UUID and company.
	 *
	 * @param uuid the UUID of the payment fee infos
	 * @param companyId the primary key of the company
	 * @return the matching payment fee infos, or an empty list if no matches were found
	 */
	@Override
	public List<PaymentFeeInfo> getPaymentFeeInfosByUuidAndCompanyId(
		String uuid, long companyId) {
		return paymentFeeInfoPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of payment fee infos matching the UUID and company.
	 *
	 * @param uuid the UUID of the payment fee infos
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of payment fee infos
	 * @param end the upper bound of the range of payment fee infos (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching payment fee infos, or an empty list if no matches were found
	 */
	@Override
	public List<PaymentFeeInfo> getPaymentFeeInfosByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<PaymentFeeInfo> orderByComparator) {
		return paymentFeeInfoPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the payment fee info matching the UUID and group.
	 *
	 * @param uuid the payment fee info's UUID
	 * @param groupId the primary key of the group
	 * @return the matching payment fee info
	 * @throws PortalException if a matching payment fee info could not be found
	 */
	@Override
	public PaymentFeeInfo getPaymentFeeInfoByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return paymentFeeInfoPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the payment fee infos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link opencps.dvcqg.extend.sync.model.impl.PaymentFeeInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of payment fee infos
	 * @param end the upper bound of the range of payment fee infos (not inclusive)
	 * @return the range of payment fee infos
	 */
	@Override
	public List<PaymentFeeInfo> getPaymentFeeInfos(int start, int end) {
		return paymentFeeInfoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of payment fee infos.
	 *
	 * @return the number of payment fee infos
	 */
	@Override
	public int getPaymentFeeInfosCount() {
		return paymentFeeInfoPersistence.countAll();
	}

	/**
	 * Updates the payment fee info in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param paymentFeeInfo the payment fee info
	 * @return the payment fee info that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public PaymentFeeInfo updatePaymentFeeInfo(PaymentFeeInfo paymentFeeInfo) {
		return paymentFeeInfoPersistence.update(paymentFeeInfo);
	}

	/**
	 * Returns the applicable info local service.
	 *
	 * @return the applicable info local service
	 */
	public opencps.dvcqg.extend.sync.service.ApplicableInfoLocalService getApplicableInfoLocalService() {
		return applicableInfoLocalService;
	}

	/**
	 * Sets the applicable info local service.
	 *
	 * @param applicableInfoLocalService the applicable info local service
	 */
	public void setApplicableInfoLocalService(
		opencps.dvcqg.extend.sync.service.ApplicableInfoLocalService applicableInfoLocalService) {
		this.applicableInfoLocalService = applicableInfoLocalService;
	}

	/**
	 * Returns the applicable info persistence.
	 *
	 * @return the applicable info persistence
	 */
	public ApplicableInfoPersistence getApplicableInfoPersistence() {
		return applicableInfoPersistence;
	}

	/**
	 * Sets the applicable info persistence.
	 *
	 * @param applicableInfoPersistence the applicable info persistence
	 */
	public void setApplicableInfoPersistence(
		ApplicableInfoPersistence applicableInfoPersistence) {
		this.applicableInfoPersistence = applicableInfoPersistence;
	}

	/**
	 * Returns the payment fee info local service.
	 *
	 * @return the payment fee info local service
	 */
	public PaymentFeeInfoLocalService getPaymentFeeInfoLocalService() {
		return paymentFeeInfoLocalService;
	}

	/**
	 * Sets the payment fee info local service.
	 *
	 * @param paymentFeeInfoLocalService the payment fee info local service
	 */
	public void setPaymentFeeInfoLocalService(
		PaymentFeeInfoLocalService paymentFeeInfoLocalService) {
		this.paymentFeeInfoLocalService = paymentFeeInfoLocalService;
	}

	/**
	 * Returns the payment fee info persistence.
	 *
	 * @return the payment fee info persistence
	 */
	public PaymentFeeInfoPersistence getPaymentFeeInfoPersistence() {
		return paymentFeeInfoPersistence;
	}

	/**
	 * Sets the payment fee info persistence.
	 *
	 * @param paymentFeeInfoPersistence the payment fee info persistence
	 */
	public void setPaymentFeeInfoPersistence(
		PaymentFeeInfoPersistence paymentFeeInfoPersistence) {
		this.paymentFeeInfoPersistence = paymentFeeInfoPersistence;
	}

	/**
	 * Returns the service config mapping local service.
	 *
	 * @return the service config mapping local service
	 */
	public opencps.dvcqg.extend.sync.service.ServiceConfigMappingLocalService getServiceConfigMappingLocalService() {
		return serviceConfigMappingLocalService;
	}

	/**
	 * Sets the service config mapping local service.
	 *
	 * @param serviceConfigMappingLocalService the service config mapping local service
	 */
	public void setServiceConfigMappingLocalService(
		opencps.dvcqg.extend.sync.service.ServiceConfigMappingLocalService serviceConfigMappingLocalService) {
		this.serviceConfigMappingLocalService = serviceConfigMappingLocalService;
	}

	/**
	 * Returns the service config mapping persistence.
	 *
	 * @return the service config mapping persistence
	 */
	public ServiceConfigMappingPersistence getServiceConfigMappingPersistence() {
		return serviceConfigMappingPersistence;
	}

	/**
	 * Sets the service config mapping persistence.
	 *
	 * @param serviceConfigMappingPersistence the service config mapping persistence
	 */
	public void setServiceConfigMappingPersistence(
		ServiceConfigMappingPersistence serviceConfigMappingPersistence) {
		this.serviceConfigMappingPersistence = serviceConfigMappingPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("opencps.dvcqg.extend.sync.model.PaymentFeeInfo",
			paymentFeeInfoLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"opencps.dvcqg.extend.sync.model.PaymentFeeInfo");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return PaymentFeeInfoLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return PaymentFeeInfo.class;
	}

	protected String getModelClassName() {
		return PaymentFeeInfo.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = paymentFeeInfoPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = opencps.dvcqg.extend.sync.service.ApplicableInfoLocalService.class)
	protected opencps.dvcqg.extend.sync.service.ApplicableInfoLocalService applicableInfoLocalService;
	@BeanReference(type = ApplicableInfoPersistence.class)
	protected ApplicableInfoPersistence applicableInfoPersistence;
	@BeanReference(type = PaymentFeeInfoLocalService.class)
	protected PaymentFeeInfoLocalService paymentFeeInfoLocalService;
	@BeanReference(type = PaymentFeeInfoPersistence.class)
	protected PaymentFeeInfoPersistence paymentFeeInfoPersistence;
	@BeanReference(type = opencps.dvcqg.extend.sync.service.ServiceConfigMappingLocalService.class)
	protected opencps.dvcqg.extend.sync.service.ServiceConfigMappingLocalService serviceConfigMappingLocalService;
	@BeanReference(type = ServiceConfigMappingPersistence.class)
	protected ServiceConfigMappingPersistence serviceConfigMappingPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}