/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.synctracking.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.synctracking.model.SyncTracking;
import org.opencps.synctracking.model.SyncTrackingModel;
import org.opencps.synctracking.model.SyncTrackingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SyncTracking service. Represents a row in the &quot;opencps_synctracking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SyncTrackingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SyncTrackingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SyncTrackingImpl
 * @see SyncTracking
 * @see SyncTrackingModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SyncTrackingModelImpl extends BaseModelImpl<SyncTracking>
	implements SyncTrackingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sync tracking model instance should use the {@link SyncTracking} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_synctracking";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "trackingId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dossierNo", Types.VARCHAR },
			{ "referenceUid", Types.VARCHAR },
			{ "serverNo", Types.VARCHAR },
			{ "protocol", Types.VARCHAR },
			{ "stateSync", Types.INTEGER },
			{ "serviceCode", Types.VARCHAR },
			{ "api", Types.VARCHAR },
			{ "fromUnit", Types.VARCHAR },
			{ "toUnit", Types.VARCHAR },
			{ "bodyRequest", Types.VARCHAR },
			{ "response", Types.VARCHAR },
			{ "metaData", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trackingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dossierNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("referenceUid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serverNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("protocol", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateSync", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("serviceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("api", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bodyRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("response", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("metaData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_synctracking (uuid_ VARCHAR(75) null,trackingId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dossierNo VARCHAR(75) null,referenceUid VARCHAR(75) null,serverNo VARCHAR(75) null,protocol VARCHAR(75) null,stateSync INTEGER,serviceCode VARCHAR(75) null,api VARCHAR(75) null,fromUnit VARCHAR(75) null,toUnit VARCHAR(75) null,bodyRequest VARCHAR(75) null,response VARCHAR(75) null,metaData VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_synctracking";
	public static final String ORDER_BY_JPQL = " ORDER BY syncTracking.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_synctracking.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.synctracking.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.synctracking.model.SyncTracking"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.synctracking.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.synctracking.model.SyncTracking"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.synctracking.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.synctracking.model.SyncTracking"),
			true);
	public static final long API_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;
	public static final long DOSSIERNO_COLUMN_BITMASK = 8L;
	public static final long GROUPID_COLUMN_BITMASK = 16L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 32L;
	public static final long PROTOCOL_COLUMN_BITMASK = 64L;
	public static final long REFERENCEUID_COLUMN_BITMASK = 128L;
	public static final long SERVICECODE_COLUMN_BITMASK = 256L;
	public static final long UUID_COLUMN_BITMASK = 512L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SyncTracking toModel(SyncTrackingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SyncTracking model = new SyncTrackingImpl();

		model.setUuid(soapModel.getUuid());
		model.setTrackingId(soapModel.getTrackingId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDossierNo(soapModel.getDossierNo());
		model.setReferenceUid(soapModel.getReferenceUid());
		model.setServerNo(soapModel.getServerNo());
		model.setProtocol(soapModel.getProtocol());
		model.setStateSync(soapModel.getStateSync());
		model.setServiceCode(soapModel.getServiceCode());
		model.setApi(soapModel.getApi());
		model.setFromUnit(soapModel.getFromUnit());
		model.setToUnit(soapModel.getToUnit());
		model.setBodyRequest(soapModel.getBodyRequest());
		model.setResponse(soapModel.getResponse());
		model.setMetaData(soapModel.getMetaData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SyncTracking> toModels(SyncTrackingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SyncTracking> models = new ArrayList<SyncTracking>(soapModels.length);

		for (SyncTrackingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.synctracking.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.synctracking.model.SyncTracking"));

	public SyncTrackingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _trackingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTrackingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _trackingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SyncTracking.class;
	}

	@Override
	public String getModelClassName() {
		return SyncTracking.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("trackingId", getTrackingId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dossierNo", getDossierNo());
		attributes.put("referenceUid", getReferenceUid());
		attributes.put("serverNo", getServerNo());
		attributes.put("protocol", getProtocol());
		attributes.put("stateSync", getStateSync());
		attributes.put("serviceCode", getServiceCode());
		attributes.put("api", getApi());
		attributes.put("fromUnit", getFromUnit());
		attributes.put("toUnit", getToUnit());
		attributes.put("bodyRequest", getBodyRequest());
		attributes.put("response", getResponse());
		attributes.put("metaData", getMetaData());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long trackingId = (Long)attributes.get("trackingId");

		if (trackingId != null) {
			setTrackingId(trackingId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}

		String referenceUid = (String)attributes.get("referenceUid");

		if (referenceUid != null) {
			setReferenceUid(referenceUid);
		}

		String serverNo = (String)attributes.get("serverNo");

		if (serverNo != null) {
			setServerNo(serverNo);
		}

		String protocol = (String)attributes.get("protocol");

		if (protocol != null) {
			setProtocol(protocol);
		}

		Integer stateSync = (Integer)attributes.get("stateSync");

		if (stateSync != null) {
			setStateSync(stateSync);
		}

		String serviceCode = (String)attributes.get("serviceCode");

		if (serviceCode != null) {
			setServiceCode(serviceCode);
		}

		String api = (String)attributes.get("api");

		if (api != null) {
			setApi(api);
		}

		String fromUnit = (String)attributes.get("fromUnit");

		if (fromUnit != null) {
			setFromUnit(fromUnit);
		}

		String toUnit = (String)attributes.get("toUnit");

		if (toUnit != null) {
			setToUnit(toUnit);
		}

		String bodyRequest = (String)attributes.get("bodyRequest");

		if (bodyRequest != null) {
			setBodyRequest(bodyRequest);
		}

		String response = (String)attributes.get("response");

		if (response != null) {
			setResponse(response);
		}

		String metaData = (String)attributes.get("metaData");

		if (metaData != null) {
			setMetaData(metaData);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getTrackingId() {
		return _trackingId;
	}

	@Override
	public void setTrackingId(long trackingId) {
		_trackingId = trackingId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		if (_originalCreateDate == null) {
			_originalCreateDate = _createDate;
		}

		_createDate = createDate;
	}

	public Date getOriginalCreateDate() {
		return _originalCreateDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask |= MODIFIEDDATE_COLUMN_BITMASK;

		if (_originalModifiedDate == null) {
			_originalModifiedDate = _modifiedDate;
		}

		_modifiedDate = modifiedDate;
	}

	public Date getOriginalModifiedDate() {
		return _originalModifiedDate;
	}

	@JSON
	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return "";
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_columnBitmask |= DOSSIERNO_COLUMN_BITMASK;

		if (_originalDossierNo == null) {
			_originalDossierNo = _dossierNo;
		}

		_dossierNo = dossierNo;
	}

	public String getOriginalDossierNo() {
		return GetterUtil.getString(_originalDossierNo);
	}

	@JSON
	@Override
	public String getReferenceUid() {
		if (_referenceUid == null) {
			return "";
		}
		else {
			return _referenceUid;
		}
	}

	@Override
	public void setReferenceUid(String referenceUid) {
		_columnBitmask |= REFERENCEUID_COLUMN_BITMASK;

		if (_originalReferenceUid == null) {
			_originalReferenceUid = _referenceUid;
		}

		_referenceUid = referenceUid;
	}

	public String getOriginalReferenceUid() {
		return GetterUtil.getString(_originalReferenceUid);
	}

	@JSON
	@Override
	public String getServerNo() {
		if (_serverNo == null) {
			return "";
		}
		else {
			return _serverNo;
		}
	}

	@Override
	public void setServerNo(String serverNo) {
		_serverNo = serverNo;
	}

	@JSON
	@Override
	public String getProtocol() {
		if (_protocol == null) {
			return "";
		}
		else {
			return _protocol;
		}
	}

	@Override
	public void setProtocol(String protocol) {
		_columnBitmask |= PROTOCOL_COLUMN_BITMASK;

		if (_originalProtocol == null) {
			_originalProtocol = _protocol;
		}

		_protocol = protocol;
	}

	public String getOriginalProtocol() {
		return GetterUtil.getString(_originalProtocol);
	}

	@JSON
	@Override
	public int getStateSync() {
		return _stateSync;
	}

	@Override
	public void setStateSync(int stateSync) {
		_stateSync = stateSync;
	}

	@JSON
	@Override
	public String getServiceCode() {
		if (_serviceCode == null) {
			return "";
		}
		else {
			return _serviceCode;
		}
	}

	@Override
	public void setServiceCode(String serviceCode) {
		_columnBitmask |= SERVICECODE_COLUMN_BITMASK;

		if (_originalServiceCode == null) {
			_originalServiceCode = _serviceCode;
		}

		_serviceCode = serviceCode;
	}

	public String getOriginalServiceCode() {
		return GetterUtil.getString(_originalServiceCode);
	}

	@JSON
	@Override
	public String getApi() {
		if (_api == null) {
			return "";
		}
		else {
			return _api;
		}
	}

	@Override
	public void setApi(String api) {
		_columnBitmask |= API_COLUMN_BITMASK;

		if (_originalApi == null) {
			_originalApi = _api;
		}

		_api = api;
	}

	public String getOriginalApi() {
		return GetterUtil.getString(_originalApi);
	}

	@JSON
	@Override
	public String getFromUnit() {
		if (_fromUnit == null) {
			return "";
		}
		else {
			return _fromUnit;
		}
	}

	@Override
	public void setFromUnit(String fromUnit) {
		_fromUnit = fromUnit;
	}

	@JSON
	@Override
	public String getToUnit() {
		if (_toUnit == null) {
			return "";
		}
		else {
			return _toUnit;
		}
	}

	@Override
	public void setToUnit(String toUnit) {
		_toUnit = toUnit;
	}

	@JSON
	@Override
	public String getBodyRequest() {
		if (_bodyRequest == null) {
			return "";
		}
		else {
			return _bodyRequest;
		}
	}

	@Override
	public void setBodyRequest(String bodyRequest) {
		_bodyRequest = bodyRequest;
	}

	@JSON
	@Override
	public String getResponse() {
		if (_response == null) {
			return "";
		}
		else {
			return _response;
		}
	}

	@Override
	public void setResponse(String response) {
		_response = response;
	}

	@JSON
	@Override
	public String getMetaData() {
		if (_metaData == null) {
			return "";
		}
		else {
			return _metaData;
		}
	}

	@Override
	public void setMetaData(String metaData) {
		_metaData = metaData;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				SyncTracking.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SyncTracking.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SyncTracking toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SyncTracking)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SyncTrackingImpl syncTrackingImpl = new SyncTrackingImpl();

		syncTrackingImpl.setUuid(getUuid());
		syncTrackingImpl.setTrackingId(getTrackingId());
		syncTrackingImpl.setCompanyId(getCompanyId());
		syncTrackingImpl.setGroupId(getGroupId());
		syncTrackingImpl.setUserId(getUserId());
		syncTrackingImpl.setUserName(getUserName());
		syncTrackingImpl.setCreateDate(getCreateDate());
		syncTrackingImpl.setModifiedDate(getModifiedDate());
		syncTrackingImpl.setDossierNo(getDossierNo());
		syncTrackingImpl.setReferenceUid(getReferenceUid());
		syncTrackingImpl.setServerNo(getServerNo());
		syncTrackingImpl.setProtocol(getProtocol());
		syncTrackingImpl.setStateSync(getStateSync());
		syncTrackingImpl.setServiceCode(getServiceCode());
		syncTrackingImpl.setApi(getApi());
		syncTrackingImpl.setFromUnit(getFromUnit());
		syncTrackingImpl.setToUnit(getToUnit());
		syncTrackingImpl.setBodyRequest(getBodyRequest());
		syncTrackingImpl.setResponse(getResponse());
		syncTrackingImpl.setMetaData(getMetaData());

		syncTrackingImpl.resetOriginalValues();

		return syncTrackingImpl;
	}

	@Override
	public int compareTo(SyncTracking syncTracking) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), syncTracking.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SyncTracking)) {
			return false;
		}

		SyncTracking syncTracking = (SyncTracking)obj;

		long primaryKey = syncTracking.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SyncTrackingModelImpl syncTrackingModelImpl = this;

		syncTrackingModelImpl._originalUuid = syncTrackingModelImpl._uuid;

		syncTrackingModelImpl._originalCompanyId = syncTrackingModelImpl._companyId;

		syncTrackingModelImpl._setOriginalCompanyId = false;

		syncTrackingModelImpl._originalGroupId = syncTrackingModelImpl._groupId;

		syncTrackingModelImpl._setOriginalGroupId = false;

		syncTrackingModelImpl._originalCreateDate = syncTrackingModelImpl._createDate;

		syncTrackingModelImpl._originalModifiedDate = syncTrackingModelImpl._modifiedDate;

		syncTrackingModelImpl._setModifiedDate = false;

		syncTrackingModelImpl._originalDossierNo = syncTrackingModelImpl._dossierNo;

		syncTrackingModelImpl._originalReferenceUid = syncTrackingModelImpl._referenceUid;

		syncTrackingModelImpl._originalProtocol = syncTrackingModelImpl._protocol;

		syncTrackingModelImpl._originalServiceCode = syncTrackingModelImpl._serviceCode;

		syncTrackingModelImpl._originalApi = syncTrackingModelImpl._api;

		syncTrackingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SyncTracking> toCacheModel() {
		SyncTrackingCacheModel syncTrackingCacheModel = new SyncTrackingCacheModel();

		syncTrackingCacheModel.uuid = getUuid();

		String uuid = syncTrackingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			syncTrackingCacheModel.uuid = null;
		}

		syncTrackingCacheModel.trackingId = getTrackingId();

		syncTrackingCacheModel.companyId = getCompanyId();

		syncTrackingCacheModel.groupId = getGroupId();

		syncTrackingCacheModel.userId = getUserId();

		syncTrackingCacheModel.userName = getUserName();

		String userName = syncTrackingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			syncTrackingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			syncTrackingCacheModel.createDate = createDate.getTime();
		}
		else {
			syncTrackingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			syncTrackingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			syncTrackingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		syncTrackingCacheModel.dossierNo = getDossierNo();

		String dossierNo = syncTrackingCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			syncTrackingCacheModel.dossierNo = null;
		}

		syncTrackingCacheModel.referenceUid = getReferenceUid();

		String referenceUid = syncTrackingCacheModel.referenceUid;

		if ((referenceUid != null) && (referenceUid.length() == 0)) {
			syncTrackingCacheModel.referenceUid = null;
		}

		syncTrackingCacheModel.serverNo = getServerNo();

		String serverNo = syncTrackingCacheModel.serverNo;

		if ((serverNo != null) && (serverNo.length() == 0)) {
			syncTrackingCacheModel.serverNo = null;
		}

		syncTrackingCacheModel.protocol = getProtocol();

		String protocol = syncTrackingCacheModel.protocol;

		if ((protocol != null) && (protocol.length() == 0)) {
			syncTrackingCacheModel.protocol = null;
		}

		syncTrackingCacheModel.stateSync = getStateSync();

		syncTrackingCacheModel.serviceCode = getServiceCode();

		String serviceCode = syncTrackingCacheModel.serviceCode;

		if ((serviceCode != null) && (serviceCode.length() == 0)) {
			syncTrackingCacheModel.serviceCode = null;
		}

		syncTrackingCacheModel.api = getApi();

		String api = syncTrackingCacheModel.api;

		if ((api != null) && (api.length() == 0)) {
			syncTrackingCacheModel.api = null;
		}

		syncTrackingCacheModel.fromUnit = getFromUnit();

		String fromUnit = syncTrackingCacheModel.fromUnit;

		if ((fromUnit != null) && (fromUnit.length() == 0)) {
			syncTrackingCacheModel.fromUnit = null;
		}

		syncTrackingCacheModel.toUnit = getToUnit();

		String toUnit = syncTrackingCacheModel.toUnit;

		if ((toUnit != null) && (toUnit.length() == 0)) {
			syncTrackingCacheModel.toUnit = null;
		}

		syncTrackingCacheModel.bodyRequest = getBodyRequest();

		String bodyRequest = syncTrackingCacheModel.bodyRequest;

		if ((bodyRequest != null) && (bodyRequest.length() == 0)) {
			syncTrackingCacheModel.bodyRequest = null;
		}

		syncTrackingCacheModel.response = getResponse();

		String response = syncTrackingCacheModel.response;

		if ((response != null) && (response.length() == 0)) {
			syncTrackingCacheModel.response = null;
		}

		syncTrackingCacheModel.metaData = getMetaData();

		String metaData = syncTrackingCacheModel.metaData;

		if ((metaData != null) && (metaData.length() == 0)) {
			syncTrackingCacheModel.metaData = null;
		}

		return syncTrackingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", trackingId=");
		sb.append(getTrackingId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append(", referenceUid=");
		sb.append(getReferenceUid());
		sb.append(", serverNo=");
		sb.append(getServerNo());
		sb.append(", protocol=");
		sb.append(getProtocol());
		sb.append(", stateSync=");
		sb.append(getStateSync());
		sb.append(", serviceCode=");
		sb.append(getServiceCode());
		sb.append(", api=");
		sb.append(getApi());
		sb.append(", fromUnit=");
		sb.append(getFromUnit());
		sb.append(", toUnit=");
		sb.append(getToUnit());
		sb.append(", bodyRequest=");
		sb.append(getBodyRequest());
		sb.append(", response=");
		sb.append(getResponse());
		sb.append(", metaData=");
		sb.append(getMetaData());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("org.opencps.synctracking.model.SyncTracking");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trackingId</column-name><column-value><![CDATA[");
		sb.append(getTrackingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceUid</column-name><column-value><![CDATA[");
		sb.append(getReferenceUid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serverNo</column-name><column-value><![CDATA[");
		sb.append(getServerNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>protocol</column-name><column-value><![CDATA[");
		sb.append(getProtocol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateSync</column-name><column-value><![CDATA[");
		sb.append(getStateSync());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceCode</column-name><column-value><![CDATA[");
		sb.append(getServiceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>api</column-name><column-value><![CDATA[");
		sb.append(getApi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromUnit</column-name><column-value><![CDATA[");
		sb.append(getFromUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toUnit</column-name><column-value><![CDATA[");
		sb.append(getToUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bodyRequest</column-name><column-value><![CDATA[");
		sb.append(getBodyRequest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>response</column-name><column-value><![CDATA[");
		sb.append(getResponse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metaData</column-name><column-value><![CDATA[");
		sb.append(getMetaData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SyncTracking.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SyncTracking.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _trackingId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _originalCreateDate;
	private Date _modifiedDate;
	private Date _originalModifiedDate;
	private boolean _setModifiedDate;
	private String _dossierNo;
	private String _originalDossierNo;
	private String _referenceUid;
	private String _originalReferenceUid;
	private String _serverNo;
	private String _protocol;
	private String _originalProtocol;
	private int _stateSync;
	private String _serviceCode;
	private String _originalServiceCode;
	private String _api;
	private String _originalApi;
	private String _fromUnit;
	private String _toUnit;
	private String _bodyRequest;
	private String _response;
	private String _metaData;
	private long _columnBitmask;
	private SyncTracking _escapedModel;
}